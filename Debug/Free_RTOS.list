
Free_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a4  080057a4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080057ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f4  20000014  080057c0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  080057c0  00024a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001725d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b58  00000000  00000000  000372a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  00039e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003b090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003330  00000000  00000000  0003c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e539  00000000  00000000  0003f518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e20d6  00000000  00000000  0004da51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fb27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0012fba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080056bc 	.word	0x080056bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	080056bc 	.word	0x080056bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fce0 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f834 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8c8 	bl	80006a0 <MX_GPIO_Init>
  MX_UART5_Init();
 8000510:	f000 f89c 	bl	800064c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f002 fb60 	bl	8002bd8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <main+0x50>)
 800051a:	2100      	movs	r1, #0
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x54>)
 800051e:	f002 fbc5 	bl	8002cac <osThreadNew>
 8000522:	4602      	mov	r2, r0
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x58>)
 8000526:	601a      	str	r2, [r3, #0]

  /* creation of Blink02 */
  Blink02Handle = osThreadNew(StartBlink02, NULL, &Blink02_attributes);
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <main+0x5c>)
 800052a:	2100      	movs	r1, #0
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x60>)
 800052e:	f002 fbbd 	bl	8002cac <osThreadNew>
 8000532:	4602      	mov	r2, r0
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <main+0x64>)
 8000536:	601a      	str	r2, [r3, #0]

  /* creation of uart_Send */
  uart_SendHandle = osThreadNew(StartTask03, NULL, &uart_Send_attributes);
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <main+0x68>)
 800053a:	2100      	movs	r1, #0
 800053c:	480b      	ldr	r0, [pc, #44]	; (800056c <main+0x6c>)
 800053e:	f002 fbb5 	bl	8002cac <osThreadNew>
 8000542:	4602      	mov	r2, r0
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <main+0x70>)
 8000546:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f002 fb7a 	bl	8002c40 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	e7fe      	b.n	800054c <main+0x4c>
 800054e:	bf00      	nop
 8000550:	08005718 	.word	0x08005718
 8000554:	08000b79 	.word	0x08000b79
 8000558:	20004980 	.word	0x20004980
 800055c:	0800573c 	.word	0x0800573c
 8000560:	08000b99 	.word	0x08000b99
 8000564:	20004978 	.word	0x20004978
 8000568:	08005760 	.word	0x08005760
 800056c:	08000bb9 	.word	0x08000bb9
 8000570:	2000497c 	.word	0x2000497c

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 f891 	bl	80056aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <SystemClock_Config+0xd0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <SystemClock_Config+0xd4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xd4>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005ec:	2332      	movs	r3, #50	; 0x32
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ff65 	bl	80014cc <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000608:	f000 fb04 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000618:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800061e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f9be 	bl	80019ac <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000636:	f000 faed 	bl	8000c14 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_UART5_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_UART5_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_UART5_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_UART5_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_UART5_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_UART5_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_UART5_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_UART5_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_UART5_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_UART5_Init+0x4c>)
 8000684:	f001 fdf4 	bl	8002270 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 fac1 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20004938 	.word	0x20004938
 800069c:	40005000 	.word	0x40005000

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
 80006ba:	4bb1      	ldr	r3, [pc, #708]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4ab0      	ldr	r2, [pc, #704]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4bae      	ldr	r3, [pc, #696]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
 80006d6:	4baa      	ldr	r3, [pc, #680]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4aa9      	ldr	r2, [pc, #676]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4ba7      	ldr	r3, [pc, #668]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	4ba3      	ldr	r3, [pc, #652]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4aa2      	ldr	r2, [pc, #648]	; (8000980 <MX_GPIO_Init+0x2e0>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4ba0      	ldr	r3, [pc, #640]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	4b9c      	ldr	r3, [pc, #624]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a9b      	ldr	r2, [pc, #620]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b99      	ldr	r3, [pc, #612]	; (8000980 <MX_GPIO_Init+0x2e0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b95      	ldr	r3, [pc, #596]	; (8000980 <MX_GPIO_Init+0x2e0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a94      	ldr	r2, [pc, #592]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b92      	ldr	r3, [pc, #584]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b8e      	ldr	r3, [pc, #568]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a8d      	ldr	r2, [pc, #564]	; (8000980 <MX_GPIO_Init+0x2e0>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b8b      	ldr	r3, [pc, #556]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b87      	ldr	r3, [pc, #540]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a86      	ldr	r2, [pc, #536]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b84      	ldr	r3, [pc, #528]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0310 	and.w	r3, r3, #16
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b80      	ldr	r3, [pc, #512]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a7f      	ldr	r2, [pc, #508]	; (8000980 <MX_GPIO_Init+0x2e0>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b7d      	ldr	r3, [pc, #500]	; (8000980 <MX_GPIO_Init+0x2e0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2116      	movs	r1, #22
 800079a:	487a      	ldr	r0, [pc, #488]	; (8000984 <MX_GPIO_Init+0x2e4>)
 800079c:	f000 fe62 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4878      	ldr	r0, [pc, #480]	; (8000988 <MX_GPIO_Init+0x2e8>)
 80007a6:	f000 fe5d 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80007b0:	4876      	ldr	r0, [pc, #472]	; (800098c <MX_GPIO_Init+0x2ec>)
 80007b2:	f000 fe57 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007bc:	4874      	ldr	r0, [pc, #464]	; (8000990 <MX_GPIO_Init+0x2f0>)
 80007be:	f000 fe51 	bl	8001464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin 
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80007c2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d4:	230c      	movs	r3, #12
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	4619      	mov	r1, r3
 80007de:	486d      	ldr	r0, [pc, #436]	; (8000994 <MX_GPIO_Init+0x2f4>)
 80007e0:	f000 fc96 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80007e4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007f6:	2305      	movs	r3, #5
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4864      	ldr	r0, [pc, #400]	; (8000994 <MX_GPIO_Init+0x2f4>)
 8000802:	f000 fc85 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000818:	230e      	movs	r3, #14
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	485c      	ldr	r0, [pc, #368]	; (8000994 <MX_GPIO_Init+0x2f4>)
 8000824:	f000 fc74 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000828:	2301      	movs	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	4850      	ldr	r0, [pc, #320]	; (8000984 <MX_GPIO_Init+0x2e4>)
 8000844:	f000 fc64 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000848:	2316      	movs	r3, #22
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4849      	ldr	r0, [pc, #292]	; (8000984 <MX_GPIO_Init+0x2e4>)
 8000860:	f000 fc56 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000864:	f248 0307 	movw	r3, #32775	; 0x8007
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800086a:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <MX_GPIO_Init+0x2f8>)
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4843      	ldr	r0, [pc, #268]	; (8000988 <MX_GPIO_Init+0x2e8>)
 800087a:	f000 fc49 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin 
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800087e:	f641 0358 	movw	r3, #6232	; 0x1858
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000890:	230e      	movs	r3, #14
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	483b      	ldr	r0, [pc, #236]	; (8000988 <MX_GPIO_Init+0x2e8>)
 800089c:	f000 fc38 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4834      	ldr	r0, [pc, #208]	; (8000988 <MX_GPIO_Init+0x2e8>)
 80008b8:	f000 fc2a 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_GPIO_Init+0x2f8>)
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	482d      	ldr	r0, [pc, #180]	; (8000984 <MX_GPIO_Init+0x2e4>)
 80008d0:	f000 fc1e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80008d4:	2303      	movs	r3, #3
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008e4:	2309      	movs	r3, #9
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4619      	mov	r1, r3
 80008ee:	482b      	ldr	r0, [pc, #172]	; (800099c <MX_GPIO_Init+0x2fc>)
 80008f0:	f000 fc0e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008f4:	2304      	movs	r3, #4
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	4825      	ldr	r0, [pc, #148]	; (800099c <MX_GPIO_Init+0x2fc>)
 8000908:	f000 fc02 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin 
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800090c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091e:	230c      	movs	r3, #12
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4819      	ldr	r0, [pc, #100]	; (8000990 <MX_GPIO_Init+0x2f0>)
 800092a:	f000 fbf1 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
                           D8_Pin D9_Pin D10_Pin D11_Pin 
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800092e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000940:	230c      	movs	r3, #12
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <MX_GPIO_Init+0x300>)
 800094c:	f000 fbe0 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000950:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000962:	230e      	movs	r3, #14
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x2fc>)
 800096e:	f000 fbcf 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000972:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
 800097c:	e012      	b.n	80009a4 <MX_GPIO_Init+0x304>
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40021800 	.word	0x40021800
 8000994:	40021400 	.word	0x40021400
 8000998:	10120000 	.word	0x10120000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80009ac:	230c      	movs	r3, #12
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	486b      	ldr	r0, [pc, #428]	; (8000b64 <MX_GPIO_Init+0x4c4>)
 80009b8:	f000 fbaa 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	4864      	ldr	r0, [pc, #400]	; (8000b64 <MX_GPIO_Init+0x4c4>)
 80009d2:	f000 fb9d 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin 
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 80009d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e8:	230c      	movs	r3, #12
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	485d      	ldr	r0, [pc, #372]	; (8000b68 <MX_GPIO_Init+0x4c8>)
 80009f4:	f000 fb8c 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4856      	ldr	r0, [pc, #344]	; (8000b68 <MX_GPIO_Init+0x4c8>)
 8000a0e:	f000 fb7f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <MX_GPIO_Init+0x4c8>)
 8000a2c:	f000 fb70 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a42:	230e      	movs	r3, #14
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4847      	ldr	r0, [pc, #284]	; (8000b6c <MX_GPIO_Init+0x4cc>)
 8000a4e:	f000 fb5f 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a52:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a64:	230e      	movs	r3, #14
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4840      	ldr	r0, [pc, #256]	; (8000b70 <MX_GPIO_Init+0x4d0>)
 8000a70:	f000 fb4e 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a86:	2304      	movs	r3, #4
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4837      	ldr	r0, [pc, #220]	; (8000b70 <MX_GPIO_Init+0x4d0>)
 8000a92:	f000 fb3d 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4830      	ldr	r0, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x4d4>)
 8000ab4:	f000 fb2c 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aca:	2307      	movs	r3, #7
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4827      	ldr	r0, [pc, #156]	; (8000b74 <MX_GPIO_Init+0x4d4>)
 8000ad6:	f000 fb1b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000ada:	2348      	movs	r3, #72	; 0x48
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aea:	230e      	movs	r3, #14
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	481c      	ldr	r0, [pc, #112]	; (8000b68 <MX_GPIO_Init+0x4c8>)
 8000af6:	f000 fb0b 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000afa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b0c:	2309      	movs	r3, #9
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4815      	ldr	r0, [pc, #84]	; (8000b6c <MX_GPIO_Init+0x4cc>)
 8000b18:	f000 fafa 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_GPIO_Init+0x4cc>)
 8000b36:	f000 faeb 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	4619      	mov	r1, r3
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_GPIO_Init+0x4c4>)
 8000b56:	f000 fadb 	bl	8001110 <HAL_GPIO_Init>

}
 8000b5a:	bf00      	nop
 8000b5c:	3738      	adds	r7, #56	; 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020000 	.word	0x40020000

08000b78 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <StartBlink01+0x1c>)
 8000b86:	f000 fc86 	bl	8001496 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f002 f934 	bl	8002df8 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b90:	e7f6      	b.n	8000b80 <StartBlink01+0x8>
 8000b92:	bf00      	nop
 8000b94:	40021800 	.word	0x40021800

08000b98 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <StartBlink02+0x1c>)
 8000ba6:	f000 fc76 	bl	8001496 <HAL_GPIO_TogglePin>
	osDelay(5000);
 8000baa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bae:	f002 f923 	bl	8002df8 <osDelay>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000bb2:	e7f5      	b.n	8000ba0 <StartBlink02+0x8>
 8000bb4:	40021800 	.word	0x40021800

08000bb8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart5, (uint8_t*)str_text , strlen(str_text), 1000);
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <StartTask03+0x30>)
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <StartTask03+0x30>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fb11 	bl	80001f0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <StartTask03+0x34>)
 8000bda:	f001 fb96 	bl	800230a <HAL_UART_Transmit>
    osDelay(5000);
 8000bde:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be2:	f002 f909 	bl	8002df8 <osDelay>
	HAL_UART_Transmit(&huart5, (uint8_t*)str_text , strlen(str_text), 1000);
 8000be6:	e7eb      	b.n	8000bc0 <StartTask03+0x8>
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20004938 	.word	0x20004938

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 f983 	bl	8000f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40001000 	.word	0x40001000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x54>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_MspInit+0x54>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x54>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x54>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x54>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x54>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f000 fa27 	bl	80010bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <HAL_UART_MspInit+0xc0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d14a      	bne.n	8000d34 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_UART_MspInit+0xc4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d04:	2308      	movs	r3, #8
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <HAL_UART_MspInit+0xc8>)
 8000d10:	f000 f9fe 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d14:	2304      	movs	r3, #4
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d24:	2308      	movs	r3, #8
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <HAL_UART_MspInit+0xcc>)
 8000d30:	f000 f9ee 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005000 	.word	0x40005000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020c00 	.word	0x40020c00

08000d4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	; 0x30
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	2036      	movs	r0, #54	; 0x36
 8000d62:	f000 f9ab 	bl	80010bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d66:	2036      	movs	r0, #54	; 0x36
 8000d68:	f000 f9c4 	bl	80010f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_InitTick+0xa4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 0210 	add.w	r2, r7, #16
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fffc 	bl	8001d90 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d98:	f000 ffd2 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_InitTick+0xa8>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0c9b      	lsrs	r3, r3, #18
 8000dac:	3b01      	subs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_InitTick+0xac>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <HAL_InitTick+0xb0>)
 8000db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_InitTick+0xac>)
 8000db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_InitTick+0xac>)
 8000dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_InitTick+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_InitTick+0xac>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <HAL_InitTick+0xac>)
 8000dd2:	f001 f80f 	bl	8001df4 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d104      	bne.n	8000de6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <HAL_InitTick+0xac>)
 8000dde:	f001 f83e 	bl	8001e5e <HAL_TIM_Base_Start_IT>
 8000de2:	4603      	mov	r3, r0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	20004984 	.word	0x20004984
 8000dfc:	40001000 	.word	0x40001000

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM6_DAC_IRQHandler+0x10>)
 8000e3a:	f001 f834 	bl	8001ea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20004984 	.word	0x20004984

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <SystemInit+0x28>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <SystemInit+0x28>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SystemInit+0x28>)
 8000e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e62:	609a      	str	r2, [r3, #8]
#endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
  ldr  r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd3 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f004 fbd3 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb2b 	bl	8000500 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000eb0:	080057ac 	.word	0x080057ac
  ldr  r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ebc:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000ec0:	20004a08 	.word	0x20004a08

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f8d8 	bl	80010a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ff28 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe92 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	200049c4 	.word	0x200049c4

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200049c4 	.word	0x200049c4

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff4c 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ce:	f7ff ff61 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 80010d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	6978      	ldr	r0, [r7, #20]
 80010da:	f7ff ffb1 	bl	8001040 <NVIC_EncodePriority>
 80010de:	4602      	mov	r2, r0
 80010e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff80 	bl	8000fec <__NVIC_SetPriority>
}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e177      	b.n	800141c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8166 	bne.w	8001416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d00b      	beq.n	800116a <HAL_GPIO_Init+0x5a>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115e:	2b11      	cmp	r3, #17
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b12      	cmp	r3, #18
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0xfc>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80c0 	beq.w	8001416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b65      	ldr	r3, [pc, #404]	; (8001430 <HAL_GPIO_Init+0x320>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a64      	ldr	r2, [pc, #400]	; (8001430 <HAL_GPIO_Init+0x320>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b62      	ldr	r3, [pc, #392]	; (8001430 <HAL_GPIO_Init+0x320>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a60      	ldr	r2, [pc, #384]	; (8001434 <HAL_GPIO_Init+0x324>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_GPIO_Init+0x328>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d037      	beq.n	800134e <HAL_GPIO_Init+0x23e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a56      	ldr	r2, [pc, #344]	; (800143c <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_GPIO_Init+0x23a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a55      	ldr	r2, [pc, #340]	; (8001440 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x236>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x334>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x232>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a53      	ldr	r2, [pc, #332]	; (8001448 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x22e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x22a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x226>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x222>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x21e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x21a>
 8001326:	2309      	movs	r3, #9
 8001328:	e012      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132a:	230a      	movs	r3, #10
 800132c:	e010      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800132e:	2308      	movs	r3, #8
 8001330:	e00e      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001332:	2307      	movs	r3, #7
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001336:	2306      	movs	r3, #6
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x240>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x240>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4934      	ldr	r1, [pc, #208]	; (8001434 <HAL_GPIO_Init+0x324>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_GPIO_Init+0x350>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001392:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_GPIO_Init+0x350>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_GPIO_Init+0x350>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_GPIO_Init+0x350>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_GPIO_Init+0x350>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <HAL_GPIO_Init+0x350>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_GPIO_Init+0x350>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_GPIO_Init+0x350>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae84 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	3724      	adds	r7, #36	; 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023800 	.word	0x40023800
 8001434:	40013800 	.word	0x40013800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	40021000 	.word	0x40021000
 800144c:	40021400 	.word	0x40021400
 8001450:	40021800 	.word	0x40021800
 8001454:	40021c00 	.word	0x40021c00
 8001458:	40022000 	.word	0x40022000
 800145c:	40022400 	.word	0x40022400
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
 8001470:	4613      	mov	r3, r2
 8001472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001480:	e003      	b.n	800148a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	041a      	lsls	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	401a      	ands	r2, r3
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d104      	bne.n	80014ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	041a      	lsls	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e25b      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d075      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d00c      	beq.n	8001510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d112      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4b9d      	ldr	r3, [pc, #628]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150e:	d10b      	bne.n	8001528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	4b99      	ldr	r3, [pc, #612]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d05b      	beq.n	80015d4 <HAL_RCC_OscConfig+0x108>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d157      	bne.n	80015d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e236      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001530:	d106      	bne.n	8001540 <HAL_RCC_OscConfig+0x74>
 8001532:	4b91      	ldr	r3, [pc, #580]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a90      	ldr	r2, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e01d      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001548:	d10c      	bne.n	8001564 <HAL_RCC_OscConfig+0x98>
 800154a:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a8a      	ldr	r2, [pc, #552]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a87      	ldr	r2, [pc, #540]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0xb0>
 8001564:	4b84      	ldr	r3, [pc, #528]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b81      	ldr	r3, [pc, #516]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a80      	ldr	r2, [pc, #512]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d013      	beq.n	80015ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fcd6 	bl	8000f34 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fcd2 	bl	8000f34 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1fb      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0xc0>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fcc2 	bl	8000f34 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fcbe 	bl	8000f34 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1e7      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xe8>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d063      	beq.n	80016aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1bb      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b56      	ldr	r3, [pc, #344]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4952      	ldr	r1, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b4f      	ldr	r3, [pc, #316]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fc77 	bl	8000f34 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fc73 	bl	8000f34 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e19c      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4940      	ldr	r1, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x2b0>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc56 	bl	8000f34 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc52 	bl	8000f34 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e17b      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fc36 	bl	8000f34 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc32 	bl	8000f34 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e15b      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x200>
 80016ea:	e015      	b.n	8001718 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_OscConfig+0x2b4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fc1f 	bl	8000f34 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff fc1b 	bl	8000f34 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e144      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a0 	beq.w	8001866 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d121      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_RCC_OscConfig+0x2b8>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff fbe1 	bl	8000f34 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e011      	b.n	800179a <HAL_RCC_OscConfig+0x2ce>
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
 8001784:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001788:	f7ff fbd4 	bl	8000f34 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e0fd      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b81      	ldr	r3, [pc, #516]	; (80019a0 <HAL_RCC_OscConfig+0x4d4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x2f0>
 80017ae:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a7c      	ldr	r2, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ba:	e01c      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b05      	cmp	r3, #5
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x312>
 80017c4:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b74      	ldr	r3, [pc, #464]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x32a>
 80017de:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	4a70      	ldr	r2, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a6d      	ldr	r2, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d015      	beq.n	800182a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb99 	bl	8000f34 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fb95 	bl	8000f34 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0bc      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0ee      	beq.n	8001806 <HAL_RCC_OscConfig+0x33a>
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff fb83 	bl	8000f34 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff fb7f 	bl	8000f34 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0a6      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ee      	bne.n	8001832 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a51      	ldr	r2, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 8001860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8092 	beq.w	8001994 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d05c      	beq.n	8001936 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d141      	bne.n	8001908 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001884:	4b48      	ldr	r3, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x4dc>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fb53 	bl	8000f34 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fb4f 	bl	8000f34 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e078      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a4:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69da      	ldr	r2, [r3, #28]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	4933      	ldr	r1, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018da:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_RCC_OscConfig+0x4dc>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb28 	bl	8000f34 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fb24 	bl	8000f34 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04d      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x41c>
 8001906:	e045      	b.n	8001994 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x4dc>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb11 	bl	8000f34 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fb0d 	bl	8000f34 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e036      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x44a>
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e029      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_RCC_OscConfig+0x4d8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	429a      	cmp	r2, r3
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d115      	bne.n	8001990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800196a:	4013      	ands	r3, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001970:	4293      	cmp	r3, r2
 8001972:	d10d      	bne.n	8001990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	42470060 	.word	0x42470060

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cc      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d90c      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b65      	ldr	r3, [pc, #404]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d044      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e067      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4934      	ldr	r1, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa4a 	bl	8000f34 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fa46 	bl	8000f34 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4601      	mov	r1, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	5cd3      	ldrb	r3, [r2, r3]
 8001b46:	fa21 f303 	lsr.w	r3, r1, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f8fa 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08005784 	.word	0x08005784
 8001b70:	20000004 	.word	0x20000004
 8001b74:	20000008 	.word	0x20000008

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d007      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x32>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d008      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x38>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80b4 	bne.w	8001d0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b5e      	ldr	r3, [pc, #376]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ba6:	60bb      	str	r3, [r7, #8]
       break;
 8001ba8:	e0b3      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bac:	60bb      	str	r3, [r7, #8]
      break;
 8001bae:	e0b0      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04a      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	f04f 0400 	mov.w	r4, #0
 8001bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	ea03 0501 	and.w	r5, r3, r1
 8001bdc:	ea04 0602 	and.w	r6, r4, r2
 8001be0:	4629      	mov	r1, r5
 8001be2:	4632      	mov	r2, r6
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	0154      	lsls	r4, r2, #5
 8001bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf2:	014b      	lsls	r3, r1, #5
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	1b49      	subs	r1, r1, r5
 8001bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	0194      	lsls	r4, r2, #6
 8001c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c0c:	018b      	lsls	r3, r1, #6
 8001c0e:	1a5b      	subs	r3, r3, r1
 8001c10:	eb64 0402 	sbc.w	r4, r4, r2
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	00e2      	lsls	r2, r4, #3
 8001c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c22:	00d9      	lsls	r1, r3, #3
 8001c24:	460b      	mov	r3, r1
 8001c26:	4614      	mov	r4, r2
 8001c28:	195b      	adds	r3, r3, r5
 8001c2a:	eb44 0406 	adc.w	r4, r4, r6
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	0262      	lsls	r2, r4, #9
 8001c38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c3c:	0259      	lsls	r1, r3, #9
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	4621      	mov	r1, r4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f04f 0400 	mov.w	r4, #0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	f7fe fad6 	bl	8000200 <__aeabi_uldivmod>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e049      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	099b      	lsrs	r3, r3, #6
 8001c62:	f04f 0400 	mov.w	r4, #0
 8001c66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	ea03 0501 	and.w	r5, r3, r1
 8001c72:	ea04 0602 	and.w	r6, r4, r2
 8001c76:	4629      	mov	r1, r5
 8001c78:	4632      	mov	r2, r6
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	f04f 0400 	mov.w	r4, #0
 8001c82:	0154      	lsls	r4, r2, #5
 8001c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c88:	014b      	lsls	r3, r1, #5
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4622      	mov	r2, r4
 8001c8e:	1b49      	subs	r1, r1, r5
 8001c90:	eb62 0206 	sbc.w	r2, r2, r6
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	f04f 0400 	mov.w	r4, #0
 8001c9c:	0194      	lsls	r4, r2, #6
 8001c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ca2:	018b      	lsls	r3, r1, #6
 8001ca4:	1a5b      	subs	r3, r3, r1
 8001ca6:	eb64 0402 	sbc.w	r4, r4, r2
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cb8:	00d9      	lsls	r1, r3, #3
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	195b      	adds	r3, r3, r5
 8001cc0:	eb44 0406 	adc.w	r4, r4, r6
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	02a2      	lsls	r2, r4, #10
 8001cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cd2:	0299      	lsls	r1, r3, #10
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	4621      	mov	r1, r4
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f04f 0400 	mov.w	r4, #0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	f7fe fa8b 	bl	8000200 <__aeabi_uldivmod>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	60bb      	str	r3, [r7, #8]
      break;
 8001d0a:	e002      	b.n	8001d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d0e:	60bb      	str	r3, [r7, #8]
      break;
 8001d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d12:	68bb      	ldr	r3, [r7, #8]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	007a1200 	.word	0x007a1200

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d48:	4601      	mov	r1, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0a9b      	lsrs	r3, r3, #10
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4a03      	ldr	r2, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	08005794 	.word	0x08005794

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d6c:	f7ff ffdc 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d70:	4601      	mov	r1, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0b5b      	lsrs	r3, r3, #13
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	08005794 	.word	0x08005794

08001d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_RCC_GetClockConfig+0x60>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 020f 	and.w	r2, r3, #15
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e01d      	b.n	8001e42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f815 	bl	8001e4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f968 	bl	8002108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f042 0201 	orr.w	r2, r2, #1
 8001e74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d007      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d122      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d11b      	bne.n	8001f02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0202 	mvn.w	r2, #2
 8001ed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8ee 	bl	80020ca <HAL_TIM_IC_CaptureCallback>
 8001eee:	e005      	b.n	8001efc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8e0 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8f1 	bl	80020de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d122      	bne.n	8001f56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d11b      	bne.n	8001f56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f06f 0204 	mvn.w	r2, #4
 8001f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8c4 	bl	80020ca <HAL_TIM_IC_CaptureCallback>
 8001f42:	e005      	b.n	8001f50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8b6 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8c7 	bl	80020de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d122      	bne.n	8001faa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11b      	bne.n	8001faa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0208 	mvn.w	r2, #8
 8001f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f89a 	bl	80020ca <HAL_TIM_IC_CaptureCallback>
 8001f96:	e005      	b.n	8001fa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f88c 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f89d 	bl	80020de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0210 	mvn.w	r2, #16
 8001fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f870 	bl	80020ca <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f862 	bl	80020b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f873 	bl	80020de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10e      	bne.n	800202a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0201 	mvn.w	r2, #1
 8002022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7fe fde3 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002034:	2b80      	cmp	r3, #128	; 0x80
 8002036:	d10e      	bne.n	8002056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b80      	cmp	r3, #128	; 0x80
 8002044:	d107      	bne.n	8002056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800204e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f903 	bl	800225c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d10e      	bne.n	8002082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d107      	bne.n	8002082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800207a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f838 	bl	80020f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b20      	cmp	r3, #32
 800208e:	d10e      	bne.n	80020ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d107      	bne.n	80020ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f06f 0220 	mvn.w	r2, #32
 80020a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f8cd 	bl	8002248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <TIM_Base_SetConfig+0x114>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d013      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002126:	d00f      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <TIM_Base_SetConfig+0x118>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00b      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <TIM_Base_SetConfig+0x11c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <TIM_Base_SetConfig+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3a      	ldr	r2, [pc, #232]	; (800222c <TIM_Base_SetConfig+0x124>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d108      	bne.n	800215a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2f      	ldr	r2, [pc, #188]	; (800221c <TIM_Base_SetConfig+0x114>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002168:	d027      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <TIM_Base_SetConfig+0x118>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d023      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <TIM_Base_SetConfig+0x11c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2a      	ldr	r2, [pc, #168]	; (8002228 <TIM_Base_SetConfig+0x120>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <TIM_Base_SetConfig+0x124>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d017      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a28      	ldr	r2, [pc, #160]	; (8002230 <TIM_Base_SetConfig+0x128>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a27      	ldr	r2, [pc, #156]	; (8002234 <TIM_Base_SetConfig+0x12c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00f      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <TIM_Base_SetConfig+0x130>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00b      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a25      	ldr	r2, [pc, #148]	; (800223c <TIM_Base_SetConfig+0x134>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <TIM_Base_SetConfig+0x138>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d003      	beq.n	80021ba <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a23      	ldr	r2, [pc, #140]	; (8002244 <TIM_Base_SetConfig+0x13c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <TIM_Base_SetConfig+0x114>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0xf8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <TIM_Base_SetConfig+0x124>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d103      	bne.n	8002208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	615a      	str	r2, [r3, #20]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40010400 	.word	0x40010400
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800
 800223c:	40001800 	.word	0x40001800
 8002240:	40001c00 	.word	0x40001c00
 8002244:	40002000 	.word	0x40002000

08002248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e03f      	b.n	8002302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fcf0 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f90b 	bl	80024d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af02      	add	r7, sp, #8
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	f040 8083 	bne.w	8002432 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_UART_Transmit+0x2e>
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e07b      	b.n	8002434 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_UART_Transmit+0x40>
 8002346:	2302      	movs	r3, #2
 8002348:	e074      	b.n	8002434 <HAL_UART_Transmit+0x12a>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2221      	movs	r2, #33	; 0x21
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002360:	f7fe fde8 	bl	8000f34 <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800237a:	e042      	b.n	8002402 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d122      	bne.n	80023da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f84c 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e042      	b.n	8002434 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3302      	adds	r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e017      	b.n	8002402 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	e013      	b.n	8002402 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f829 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e01f      	b.n	8002434 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1b7      	bne.n	800237c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f810 	bl	800243c <UART_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e006      	b.n	8002434 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244c:	e02c      	b.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d028      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <UART_WaitOnFlagUntilTimeout+0x30>
 800245c:	f7fe fd6a 	bl	8000f34 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	429a      	cmp	r2, r3
 800246a:	d21d      	bcs.n	80024a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800247a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e00f      	b.n	80024c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	4013      	ands	r3, r2
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d0c3      	beq.n	800244e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800253e:	f040 818b 	bne.w	8002858 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4ac1      	ldr	r2, [pc, #772]	; (800284c <UART_SetConfig+0x37c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d005      	beq.n	8002558 <UART_SetConfig+0x88>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4abf      	ldr	r2, [pc, #764]	; (8002850 <UART_SetConfig+0x380>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 80bd 	bne.w	80026d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002558:	f7ff fc06 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 800255c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	461d      	mov	r5, r3
 8002562:	f04f 0600 	mov.w	r6, #0
 8002566:	46a8      	mov	r8, r5
 8002568:	46b1      	mov	r9, r6
 800256a:	eb18 0308 	adds.w	r3, r8, r8
 800256e:	eb49 0409 	adc.w	r4, r9, r9
 8002572:	4698      	mov	r8, r3
 8002574:	46a1      	mov	r9, r4
 8002576:	eb18 0805 	adds.w	r8, r8, r5
 800257a:	eb49 0906 	adc.w	r9, r9, r6
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800258a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800258e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002592:	4688      	mov	r8, r1
 8002594:	4691      	mov	r9, r2
 8002596:	eb18 0005 	adds.w	r0, r8, r5
 800259a:	eb49 0106 	adc.w	r1, r9, r6
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	461d      	mov	r5, r3
 80025a4:	f04f 0600 	mov.w	r6, #0
 80025a8:	196b      	adds	r3, r5, r5
 80025aa:	eb46 0406 	adc.w	r4, r6, r6
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fd fe25 	bl	8000200 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	461a      	mov	r2, r3
 80025bc:	4ba5      	ldr	r3, [pc, #660]	; (8002854 <UART_SetConfig+0x384>)
 80025be:	fba3 2302 	umull	r2, r3, r3, r2
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	461d      	mov	r5, r3
 80025cc:	f04f 0600 	mov.w	r6, #0
 80025d0:	46a9      	mov	r9, r5
 80025d2:	46b2      	mov	sl, r6
 80025d4:	eb19 0309 	adds.w	r3, r9, r9
 80025d8:	eb4a 040a 	adc.w	r4, sl, sl
 80025dc:	4699      	mov	r9, r3
 80025de:	46a2      	mov	sl, r4
 80025e0:	eb19 0905 	adds.w	r9, r9, r5
 80025e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025fc:	4689      	mov	r9, r1
 80025fe:	4692      	mov	sl, r2
 8002600:	eb19 0005 	adds.w	r0, r9, r5
 8002604:	eb4a 0106 	adc.w	r1, sl, r6
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	461d      	mov	r5, r3
 800260e:	f04f 0600 	mov.w	r6, #0
 8002612:	196b      	adds	r3, r5, r5
 8002614:	eb46 0406 	adc.w	r4, r6, r6
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	f7fd fdf0 	bl	8000200 <__aeabi_uldivmod>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	461a      	mov	r2, r3
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <UART_SetConfig+0x384>)
 8002628:	fba3 1302 	umull	r1, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	3332      	adds	r3, #50	; 0x32
 800263a:	4a86      	ldr	r2, [pc, #536]	; (8002854 <UART_SetConfig+0x384>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002648:	4498      	add	r8, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	461d      	mov	r5, r3
 800264e:	f04f 0600 	mov.w	r6, #0
 8002652:	46a9      	mov	r9, r5
 8002654:	46b2      	mov	sl, r6
 8002656:	eb19 0309 	adds.w	r3, r9, r9
 800265a:	eb4a 040a 	adc.w	r4, sl, sl
 800265e:	4699      	mov	r9, r3
 8002660:	46a2      	mov	sl, r4
 8002662:	eb19 0905 	adds.w	r9, r9, r5
 8002666:	eb4a 0a06 	adc.w	sl, sl, r6
 800266a:	f04f 0100 	mov.w	r1, #0
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002676:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800267a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800267e:	4689      	mov	r9, r1
 8002680:	4692      	mov	sl, r2
 8002682:	eb19 0005 	adds.w	r0, r9, r5
 8002686:	eb4a 0106 	adc.w	r1, sl, r6
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	461d      	mov	r5, r3
 8002690:	f04f 0600 	mov.w	r6, #0
 8002694:	196b      	adds	r3, r5, r5
 8002696:	eb46 0406 	adc.w	r4, r6, r6
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	f7fd fdaf 	bl	8000200 <__aeabi_uldivmod>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <UART_SetConfig+0x384>)
 80026aa:	fba3 1302 	umull	r1, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2164      	movs	r1, #100	; 0x64
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	3332      	adds	r3, #50	; 0x32
 80026bc:	4a65      	ldr	r2, [pc, #404]	; (8002854 <UART_SetConfig+0x384>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	f003 0207 	and.w	r2, r3, #7
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4442      	add	r2, r8
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e26f      	b.n	8002bb2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026d2:	f7ff fb35 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 80026d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	461d      	mov	r5, r3
 80026dc:	f04f 0600 	mov.w	r6, #0
 80026e0:	46a8      	mov	r8, r5
 80026e2:	46b1      	mov	r9, r6
 80026e4:	eb18 0308 	adds.w	r3, r8, r8
 80026e8:	eb49 0409 	adc.w	r4, r9, r9
 80026ec:	4698      	mov	r8, r3
 80026ee:	46a1      	mov	r9, r4
 80026f0:	eb18 0805 	adds.w	r8, r8, r5
 80026f4:	eb49 0906 	adc.w	r9, r9, r6
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002704:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002708:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800270c:	4688      	mov	r8, r1
 800270e:	4691      	mov	r9, r2
 8002710:	eb18 0005 	adds.w	r0, r8, r5
 8002714:	eb49 0106 	adc.w	r1, r9, r6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	461d      	mov	r5, r3
 800271e:	f04f 0600 	mov.w	r6, #0
 8002722:	196b      	adds	r3, r5, r5
 8002724:	eb46 0406 	adc.w	r4, r6, r6
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	f7fd fd68 	bl	8000200 <__aeabi_uldivmod>
 8002730:	4603      	mov	r3, r0
 8002732:	460c      	mov	r4, r1
 8002734:	461a      	mov	r2, r3
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <UART_SetConfig+0x384>)
 8002738:	fba3 2302 	umull	r2, r3, r3, r2
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	461d      	mov	r5, r3
 8002746:	f04f 0600 	mov.w	r6, #0
 800274a:	46a9      	mov	r9, r5
 800274c:	46b2      	mov	sl, r6
 800274e:	eb19 0309 	adds.w	r3, r9, r9
 8002752:	eb4a 040a 	adc.w	r4, sl, sl
 8002756:	4699      	mov	r9, r3
 8002758:	46a2      	mov	sl, r4
 800275a:	eb19 0905 	adds.w	r9, r9, r5
 800275e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800276e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002772:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002776:	4689      	mov	r9, r1
 8002778:	4692      	mov	sl, r2
 800277a:	eb19 0005 	adds.w	r0, r9, r5
 800277e:	eb4a 0106 	adc.w	r1, sl, r6
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	461d      	mov	r5, r3
 8002788:	f04f 0600 	mov.w	r6, #0
 800278c:	196b      	adds	r3, r5, r5
 800278e:	eb46 0406 	adc.w	r4, r6, r6
 8002792:	461a      	mov	r2, r3
 8002794:	4623      	mov	r3, r4
 8002796:	f7fd fd33 	bl	8000200 <__aeabi_uldivmod>
 800279a:	4603      	mov	r3, r0
 800279c:	460c      	mov	r4, r1
 800279e:	461a      	mov	r2, r3
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <UART_SetConfig+0x384>)
 80027a2:	fba3 1302 	umull	r1, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	3332      	adds	r3, #50	; 0x32
 80027b4:	4a27      	ldr	r2, [pc, #156]	; (8002854 <UART_SetConfig+0x384>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c2:	4498      	add	r8, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	461d      	mov	r5, r3
 80027c8:	f04f 0600 	mov.w	r6, #0
 80027cc:	46a9      	mov	r9, r5
 80027ce:	46b2      	mov	sl, r6
 80027d0:	eb19 0309 	adds.w	r3, r9, r9
 80027d4:	eb4a 040a 	adc.w	r4, sl, sl
 80027d8:	4699      	mov	r9, r3
 80027da:	46a2      	mov	sl, r4
 80027dc:	eb19 0905 	adds.w	r9, r9, r5
 80027e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027f8:	4689      	mov	r9, r1
 80027fa:	4692      	mov	sl, r2
 80027fc:	eb19 0005 	adds.w	r0, r9, r5
 8002800:	eb4a 0106 	adc.w	r1, sl, r6
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	461d      	mov	r5, r3
 800280a:	f04f 0600 	mov.w	r6, #0
 800280e:	196b      	adds	r3, r5, r5
 8002810:	eb46 0406 	adc.w	r4, r6, r6
 8002814:	461a      	mov	r2, r3
 8002816:	4623      	mov	r3, r4
 8002818:	f7fd fcf2 	bl	8000200 <__aeabi_uldivmod>
 800281c:	4603      	mov	r3, r0
 800281e:	460c      	mov	r4, r1
 8002820:	461a      	mov	r2, r3
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <UART_SetConfig+0x384>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	; 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	3332      	adds	r3, #50	; 0x32
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <UART_SetConfig+0x384>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4442      	add	r2, r8
 8002848:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800284a:	e1b2      	b.n	8002bb2 <UART_SetConfig+0x6e2>
 800284c:	40011000 	.word	0x40011000
 8002850:	40011400 	.word	0x40011400
 8002854:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4ad7      	ldr	r2, [pc, #860]	; (8002bbc <UART_SetConfig+0x6ec>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d005      	beq.n	800286e <UART_SetConfig+0x39e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4ad6      	ldr	r2, [pc, #856]	; (8002bc0 <UART_SetConfig+0x6f0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f040 80d1 	bne.w	8002a10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800286e:	f7ff fa7b 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8002872:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	469a      	mov	sl, r3
 8002878:	f04f 0b00 	mov.w	fp, #0
 800287c:	46d0      	mov	r8, sl
 800287e:	46d9      	mov	r9, fp
 8002880:	eb18 0308 	adds.w	r3, r8, r8
 8002884:	eb49 0409 	adc.w	r4, r9, r9
 8002888:	4698      	mov	r8, r3
 800288a:	46a1      	mov	r9, r4
 800288c:	eb18 080a 	adds.w	r8, r8, sl
 8002890:	eb49 090b 	adc.w	r9, r9, fp
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028a8:	4688      	mov	r8, r1
 80028aa:	4691      	mov	r9, r2
 80028ac:	eb1a 0508 	adds.w	r5, sl, r8
 80028b0:	eb4b 0609 	adc.w	r6, fp, r9
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	0094      	lsls	r4, r2, #2
 80028c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	461a      	mov	r2, r3
 80028d0:	4623      	mov	r3, r4
 80028d2:	4628      	mov	r0, r5
 80028d4:	4631      	mov	r1, r6
 80028d6:	f7fd fc93 	bl	8000200 <__aeabi_uldivmod>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	461a      	mov	r2, r3
 80028e0:	4bb8      	ldr	r3, [pc, #736]	; (8002bc4 <UART_SetConfig+0x6f4>)
 80028e2:	fba3 2302 	umull	r2, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	469b      	mov	fp, r3
 80028f0:	f04f 0c00 	mov.w	ip, #0
 80028f4:	46d9      	mov	r9, fp
 80028f6:	46e2      	mov	sl, ip
 80028f8:	eb19 0309 	adds.w	r3, r9, r9
 80028fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002900:	4699      	mov	r9, r3
 8002902:	46a2      	mov	sl, r4
 8002904:	eb19 090b 	adds.w	r9, r9, fp
 8002908:	eb4a 0a0c 	adc.w	sl, sl, ip
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800291c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002920:	4689      	mov	r9, r1
 8002922:	4692      	mov	sl, r2
 8002924:	eb1b 0509 	adds.w	r5, fp, r9
 8002928:	eb4c 060a 	adc.w	r6, ip, sl
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4619      	mov	r1, r3
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f04f 0400 	mov.w	r4, #0
 800293e:	0094      	lsls	r4, r2, #2
 8002940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002944:	008b      	lsls	r3, r1, #2
 8002946:	461a      	mov	r2, r3
 8002948:	4623      	mov	r3, r4
 800294a:	4628      	mov	r0, r5
 800294c:	4631      	mov	r1, r6
 800294e:	f7fd fc57 	bl	8000200 <__aeabi_uldivmod>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	461a      	mov	r2, r3
 8002958:	4b9a      	ldr	r3, [pc, #616]	; (8002bc4 <UART_SetConfig+0x6f4>)
 800295a:	fba3 1302 	umull	r1, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2164      	movs	r1, #100	; 0x64
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	4a95      	ldr	r2, [pc, #596]	; (8002bc4 <UART_SetConfig+0x6f4>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002978:	4498      	add	r8, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	469b      	mov	fp, r3
 800297e:	f04f 0c00 	mov.w	ip, #0
 8002982:	46d9      	mov	r9, fp
 8002984:	46e2      	mov	sl, ip
 8002986:	eb19 0309 	adds.w	r3, r9, r9
 800298a:	eb4a 040a 	adc.w	r4, sl, sl
 800298e:	4699      	mov	r9, r3
 8002990:	46a2      	mov	sl, r4
 8002992:	eb19 090b 	adds.w	r9, r9, fp
 8002996:	eb4a 0a0c 	adc.w	sl, sl, ip
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ae:	4689      	mov	r9, r1
 80029b0:	4692      	mov	sl, r2
 80029b2:	eb1b 0509 	adds.w	r5, fp, r9
 80029b6:	eb4c 060a 	adc.w	r6, ip, sl
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	0094      	lsls	r4, r2, #2
 80029ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029d2:	008b      	lsls	r3, r1, #2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	4628      	mov	r0, r5
 80029da:	4631      	mov	r1, r6
 80029dc:	f7fd fc10 	bl	8000200 <__aeabi_uldivmod>
 80029e0:	4603      	mov	r3, r0
 80029e2:	460c      	mov	r4, r1
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <UART_SetConfig+0x6f4>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	; 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	3332      	adds	r3, #50	; 0x32
 80029fa:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <UART_SetConfig+0x6f4>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4442      	add	r2, r8
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	e0d0      	b.n	8002bb2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a10:	f7ff f996 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002a14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	469a      	mov	sl, r3
 8002a1a:	f04f 0b00 	mov.w	fp, #0
 8002a1e:	46d0      	mov	r8, sl
 8002a20:	46d9      	mov	r9, fp
 8002a22:	eb18 0308 	adds.w	r3, r8, r8
 8002a26:	eb49 0409 	adc.w	r4, r9, r9
 8002a2a:	4698      	mov	r8, r3
 8002a2c:	46a1      	mov	r9, r4
 8002a2e:	eb18 080a 	adds.w	r8, r8, sl
 8002a32:	eb49 090b 	adc.w	r9, r9, fp
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a4a:	4688      	mov	r8, r1
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	eb1a 0508 	adds.w	r5, sl, r8
 8002a52:	eb4b 0609 	adc.w	r6, fp, r9
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	f04f 0400 	mov.w	r4, #0
 8002a68:	0094      	lsls	r4, r2, #2
 8002a6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a6e:	008b      	lsls	r3, r1, #2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4623      	mov	r3, r4
 8002a74:	4628      	mov	r0, r5
 8002a76:	4631      	mov	r1, r6
 8002a78:	f7fd fbc2 	bl	8000200 <__aeabi_uldivmod>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <UART_SetConfig+0x6f4>)
 8002a84:	fba3 2302 	umull	r2, r3, r3, r2
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	469b      	mov	fp, r3
 8002a92:	f04f 0c00 	mov.w	ip, #0
 8002a96:	46d9      	mov	r9, fp
 8002a98:	46e2      	mov	sl, ip
 8002a9a:	eb19 0309 	adds.w	r3, r9, r9
 8002a9e:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa2:	4699      	mov	r9, r3
 8002aa4:	46a2      	mov	sl, r4
 8002aa6:	eb19 090b 	adds.w	r9, r9, fp
 8002aaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002abe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac2:	4689      	mov	r9, r1
 8002ac4:	4692      	mov	sl, r2
 8002ac6:	eb1b 0509 	adds.w	r5, fp, r9
 8002aca:	eb4c 060a 	adc.w	r6, ip, sl
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	f04f 0400 	mov.w	r4, #0
 8002ae0:	0094      	lsls	r4, r2, #2
 8002ae2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae6:	008b      	lsls	r3, r1, #2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4623      	mov	r3, r4
 8002aec:	4628      	mov	r0, r5
 8002aee:	4631      	mov	r1, r6
 8002af0:	f7fd fb86 	bl	8000200 <__aeabi_uldivmod>
 8002af4:	4603      	mov	r3, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <UART_SetConfig+0x6f4>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	2164      	movs	r1, #100	; 0x64
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	3332      	adds	r3, #50	; 0x32
 8002b0e:	4a2d      	ldr	r2, [pc, #180]	; (8002bc4 <UART_SetConfig+0x6f4>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1a:	4498      	add	r8, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	469b      	mov	fp, r3
 8002b20:	f04f 0c00 	mov.w	ip, #0
 8002b24:	46d9      	mov	r9, fp
 8002b26:	46e2      	mov	sl, ip
 8002b28:	eb19 0309 	adds.w	r3, r9, r9
 8002b2c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b30:	4699      	mov	r9, r3
 8002b32:	46a2      	mov	sl, r4
 8002b34:	eb19 090b 	adds.w	r9, r9, fp
 8002b38:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b50:	4689      	mov	r9, r1
 8002b52:	4692      	mov	sl, r2
 8002b54:	eb1b 0509 	adds.w	r5, fp, r9
 8002b58:	eb4c 060a 	adc.w	r6, ip, sl
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4619      	mov	r1, r3
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	0094      	lsls	r4, r2, #2
 8002b70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b74:	008b      	lsls	r3, r1, #2
 8002b76:	461a      	mov	r2, r3
 8002b78:	4623      	mov	r3, r4
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	4631      	mov	r1, r6
 8002b7e:	f7fd fb3f 	bl	8000200 <__aeabi_uldivmod>
 8002b82:	4603      	mov	r3, r0
 8002b84:	460c      	mov	r4, r1
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <UART_SetConfig+0x6f4>)
 8002b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2164      	movs	r1, #100	; 0x64
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	3332      	adds	r3, #50	; 0x32
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <UART_SetConfig+0x6f4>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 020f 	and.w	r2, r3, #15
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4442      	add	r2, r8
 8002bae:	609a      	str	r2, [r3, #8]
}
 8002bb0:	e7ff      	b.n	8002bb2 <UART_SetConfig+0x6e2>
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbc:	40011000 	.word	0x40011000
 8002bc0:	40011400 	.word	0x40011400
 8002bc4:	51eb851f 	.word	0x51eb851f

08002bc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bde:	f3ef 8305 	mrs	r3, IPSR
 8002be2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002be4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bea:	f3ef 8310 	mrs	r3, PRIMASK
 8002bee:	607b      	str	r3, [r7, #4]
  return(result);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8002bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <osKernelInitialize+0x3a>
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <osKernelInitialize+0x64>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d103      	bne.n	8002c12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002c0a:	f06f 0305 	mvn.w	r3, #5
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e00c      	b.n	8002c2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <osKernelInitialize+0x64>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <osKernelInitialize+0x64>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e002      	b.n	8002c2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000030 	.word	0x20000030

08002c40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c46:	f3ef 8305 	mrs	r3, IPSR
 8002c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c52:	f3ef 8310 	mrs	r3, PRIMASK
 8002c56:	607b      	str	r3, [r7, #4]
  return(result);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c5e:	f3ef 8311 	mrs	r3, BASEPRI
 8002c62:	603b      	str	r3, [r7, #0]
  return(result);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <osKernelStart+0x3a>
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <osKernelStart+0x68>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d103      	bne.n	8002c7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002c72:	f06f 0305 	mvn.w	r3, #5
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e010      	b.n	8002c9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <osKernelStart+0x68>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d109      	bne.n	8002c96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c82:	f7ff ffa1 	bl	8002bc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <osKernelStart+0x68>)
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c8c:	f001 f870 	bl	8003d70 <vTaskStartScheduler>
      stat = osOK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e002      	b.n	8002c9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000030 	.word	0x20000030

08002cac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af04      	add	r7, sp, #16
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cbc:	f3ef 8305 	mrs	r3, IPSR
 8002cc0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 808f 	bne.w	8002de8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cca:	f3ef 8310 	mrs	r3, PRIMASK
 8002cce:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d105      	bne.n	8002ce2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cda:	617b      	str	r3, [r7, #20]
  return(result);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <osThreadNew+0x3e>
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <osThreadNew+0x148>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d07e      	beq.n	8002de8 <osThreadNew+0x13c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d07b      	beq.n	8002de8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002cf4:	2318      	movs	r3, #24
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002d00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d045      	beq.n	8002d94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <osThreadNew+0x6a>
        name = attr->name;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d008      	beq.n	8002d3c <osThreadNew+0x90>
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	2b38      	cmp	r3, #56	; 0x38
 8002d2e:	d805      	bhi.n	8002d3c <osThreadNew+0x90>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <osThreadNew+0x94>
        return (NULL);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e054      	b.n	8002dea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <osThreadNew+0xca>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b5b      	cmp	r3, #91	; 0x5b
 8002d5e:	d90a      	bls.n	8002d76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <osThreadNew+0xca>
        mem = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	e010      	b.n	8002d98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <osThreadNew+0xec>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d108      	bne.n	8002d98 <osThreadNew+0xec>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <osThreadNew+0xec>
          mem = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	623b      	str	r3, [r7, #32]
 8002d92:	e001      	b.n	8002d98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d110      	bne.n	8002dc0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002da6:	9202      	str	r2, [sp, #8]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fe09 	bl	80039cc <xTaskCreateStatic>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e013      	b.n	8002de8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d110      	bne.n	8002de8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fe51 	bl	8003a80 <xTaskCreate>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <osThreadNew+0x13c>
          hTask = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002de8:	693b      	ldr	r3, [r7, #16]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3730      	adds	r7, #48	; 0x30
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000030 	.word	0x20000030

08002df8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e00:	f3ef 8305 	mrs	r3, IPSR
 8002e04:	613b      	str	r3, [r7, #16]
  return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e18:	f3ef 8311 	mrs	r3, BASEPRI
 8002e1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <osDelay+0x3c>
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <osDelay+0x58>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d103      	bne.n	8002e34 <osDelay+0x3c>
    stat = osErrorISR;
 8002e2c:	f06f 0305 	mvn.w	r3, #5
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e007      	b.n	8002e44 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 ff62 	bl	8003d08 <vTaskDelay>
    }
  }

  return (stat);
 8002e44:	697b      	ldr	r3, [r7, #20]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000030 	.word	0x20000030

08002e54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <vApplicationGetIdleTaskMemory+0x30>)
 8002e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	601a      	str	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000034 	.word	0x20000034
 8002e84:	20000090 	.word	0x20000090

08002e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <vApplicationGetTimerTaskMemory+0x30>)
 8002e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002ec 	.word	0x200002ec

08002ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f103 0208 	add.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f103 0208 	add.w	r2, r3, #8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f103 0208 	add.w	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e00c      	b.n	8002f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3308      	adds	r3, #8
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	e002      	b.n	8002f8c <vListInsert+0x2e>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d2f6      	bcs.n	8002f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6852      	ldr	r2, [r2, #4]
 8002ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d103      	bne.n	8003004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	1e5a      	subs	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d109      	bne.n	800304c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	e7fe      	b.n	800304a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800304c:	f002 f80e 	bl	800506c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	441a      	add	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	3b01      	subs	r3, #1
 800307e:	68f9      	ldr	r1, [r7, #12]
 8003080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	441a      	add	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	22ff      	movs	r2, #255	; 0xff
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d114      	bne.n	80030cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3310      	adds	r3, #16
 80030ae:	4618      	mov	r0, r3
 80030b0:	f001 f8de 	bl	8004270 <xTaskRemoveFromEventList>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d012      	beq.n	80030e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <xQueueGenericReset+0xcc>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	e009      	b.n	80030e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3310      	adds	r3, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fef3 	bl	8002ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff feee 	bl	8002ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030e0:	f001 fff2 	bl	80050c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030e4:	2301      	movs	r3, #1
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000ed04 	.word	0xe000ed04

080030f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <xQueueGenericCreateStatic+0x28>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
 800311a:	e7fe      	b.n	800311a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <xQueueGenericCreateStatic+0x42>
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e7fe      	b.n	8003134 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <xQueueGenericCreateStatic+0x4e>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <xQueueGenericCreateStatic+0x52>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <xQueueGenericCreateStatic+0x54>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <xQueueGenericCreateStatic+0x6c>
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	e7fe      	b.n	800315e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <xQueueGenericCreateStatic+0x78>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <xQueueGenericCreateStatic+0x7c>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <xQueueGenericCreateStatic+0x7e>
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <xQueueGenericCreateStatic+0x96>
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e7fe      	b.n	8003188 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800318a:	2350      	movs	r3, #80	; 0x50
 800318c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b50      	cmp	r3, #80	; 0x50
 8003192:	d009      	beq.n	80031a8 <xQueueGenericCreateStatic+0xb4>
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e7fe      	b.n	80031a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00d      	beq.n	80031d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f805 	bl	80031da <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e002      	b.n	80031fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003208:	2101      	movs	r1, #1
 800320a:	69b8      	ldr	r0, [r7, #24]
 800320c:	f7ff ff0a 	bl	8003024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08e      	sub	sp, #56	; 0x38
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800322e:	2300      	movs	r3, #0
 8003230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <xQueueGenericSend+0x30>
 800323c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003240:	f383 8811 	msr	BASEPRI, r3
 8003244:	f3bf 8f6f 	isb	sy
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
 800324e:	e7fe      	b.n	800324e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <xQueueGenericSend+0x3e>
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <xQueueGenericSend+0x42>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <xQueueGenericSend+0x44>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <xQueueGenericSend+0x5c>
 8003268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	e7fe      	b.n	800327a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d103      	bne.n	800328a <xQueueGenericSend+0x6a>
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <xQueueGenericSend+0x6e>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <xQueueGenericSend+0x70>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <xQueueGenericSend+0x88>
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	623b      	str	r3, [r7, #32]
 80032a6:	e7fe      	b.n	80032a6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a8:	f001 f998 	bl	80045dc <xTaskGetSchedulerState>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <xQueueGenericSend+0x98>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <xQueueGenericSend+0x9c>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <xQueueGenericSend+0x9e>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <xQueueGenericSend+0xb6>
 80032c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e7fe      	b.n	80032d4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032d6:	f001 fec9 	bl	800506c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <xQueueGenericSend+0xcc>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d129      	bne.n	8003340 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f2:	f000 f9ff 	bl	80036f4 <prvCopyDataToQueue>
 80032f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	3324      	adds	r3, #36	; 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f000 ffb3 	bl	8004270 <xTaskRemoveFromEventList>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <xQueueGenericSend+0x1f0>)
 8003312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	e00a      	b.n	8003338 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003328:	4b39      	ldr	r3, [pc, #228]	; (8003410 <xQueueGenericSend+0x1f0>)
 800332a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003338:	f001 fec6 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	e063      	b.n	8003408 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003346:	f001 febf 	bl	80050c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800334a:	2300      	movs	r3, #0
 800334c:	e05c      	b.n	8003408 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	2b00      	cmp	r3, #0
 8003352:	d106      	bne.n	8003362 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4618      	mov	r0, r3
 800335a:	f000 ffeb 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800335e:	2301      	movs	r3, #1
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003362:	f001 feb1 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003366:	f000 fd67 	bl	8003e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800336a:	f001 fe7f 	bl	800506c <vPortEnterCritical>
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <xQueueGenericSend+0x164>
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338a:	b25b      	sxtb	r3, r3
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d103      	bne.n	800339a <xQueueGenericSend+0x17a>
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800339a:	f001 fe95 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800339e:	1d3a      	adds	r2, r7, #4
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ffda 	bl	8004360 <xTaskCheckForTimeOut>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d124      	bne.n	80033fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b4:	f000 fa96 	bl	80038e4 <prvIsQueueFull>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	3310      	adds	r3, #16
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 ff04 	bl	80041d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ce:	f000 fa21 	bl	8003814 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033d2:	f000 fd3f 	bl	8003e54 <xTaskResumeAll>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f af7c 	bne.w	80032d6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <xQueueGenericSend+0x1f0>)
 80033e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	e772      	b.n	80032d6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f2:	f000 fa0f 	bl	8003814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f6:	f000 fd2d 	bl	8003e54 <xTaskResumeAll>
 80033fa:	e76c      	b.n	80032d6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033fe:	f000 fa09 	bl	8003814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003402:	f000 fd27 	bl	8003e54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003406:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003408:	4618      	mov	r0, r3
 800340a:	3738      	adds	r7, #56	; 0x38
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08e      	sub	sp, #56	; 0x38
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <xQueueGenericSendFromISR+0x2c>
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	e7fe      	b.n	800343e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <xQueueGenericSendFromISR+0x3a>
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <xQueueGenericSendFromISR+0x3e>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <xQueueGenericSendFromISR+0x40>
 8003452:	2300      	movs	r3, #0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <xQueueGenericSendFromISR+0x58>
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	e7fe      	b.n	800346a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d103      	bne.n	800347a <xQueueGenericSendFromISR+0x66>
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <xQueueGenericSendFromISR+0x6a>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <xQueueGenericSendFromISR+0x6c>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <xQueueGenericSendFromISR+0x84>
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e7fe      	b.n	8003496 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003498:	f001 fec4 	bl	8005224 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800349c:	f3ef 8211 	mrs	r2, BASEPRI
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	61ba      	str	r2, [r7, #24]
 80034b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <xQueueGenericSendFromISR+0xb6>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d12c      	bne.n	8003524 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034da:	f000 f90b 	bl	80036f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d112      	bne.n	800350e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	3324      	adds	r3, #36	; 0x24
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 febb 	bl	8004270 <xTaskRemoveFromEventList>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e007      	b.n	800351e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800350e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003512:	3301      	adds	r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	b25a      	sxtb	r2, r3
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800351e:	2301      	movs	r3, #1
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003522:	e001      	b.n	8003528 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003524:	2300      	movs	r3, #0
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003534:	4618      	mov	r0, r3
 8003536:	3738      	adds	r7, #56	; 0x38
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	; 0x30
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <xQueueReceive+0x2e>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	623b      	str	r3, [r7, #32]
 8003568:	e7fe      	b.n	8003568 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <xQueueReceive+0x3c>
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <xQueueReceive+0x40>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <xQueueReceive+0x42>
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <xQueueReceive+0x5a>
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e7fe      	b.n	8003594 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003596:	f001 f821 	bl	80045dc <xTaskGetSchedulerState>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <xQueueReceive+0x6a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <xQueueReceive+0x6e>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueReceive+0x70>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <xQueueReceive+0x88>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e7fe      	b.n	80035c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035c4:	f001 fd52 	bl	800506c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01f      	beq.n	8003614 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035d8:	f000 f8f6 	bl	80037c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00f      	beq.n	800360c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	3310      	adds	r3, #16
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fe3d 	bl	8004270 <xTaskRemoveFromEventList>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <xQueueReceive+0x1b4>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800360c:	f001 fd5c 	bl	80050c8 <vPortExitCritical>
				return pdPASS;
 8003610:	2301      	movs	r3, #1
 8003612:	e069      	b.n	80036e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800361a:	f001 fd55 	bl	80050c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800361e:	2300      	movs	r3, #0
 8003620:	e062      	b.n	80036e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fe81 	bl	8004334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003632:	2301      	movs	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003636:	f001 fd47 	bl	80050c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800363a:	f000 fbfd 	bl	8003e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800363e:	f001 fd15 	bl	800506c <vPortEnterCritical>
 8003642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003648:	b25b      	sxtb	r3, r3
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d103      	bne.n	8003658 <xQueueReceive+0x11c>
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365e:	b25b      	sxtb	r3, r3
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d103      	bne.n	800366e <xQueueReceive+0x132>
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800366e:	f001 fd2b 	bl	80050c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003672:	1d3a      	adds	r2, r7, #4
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fe70 	bl	8004360 <xTaskCheckForTimeOut>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d123      	bne.n	80036ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003688:	f000 f916 	bl	80038b8 <prvIsQueueEmpty>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	3324      	adds	r3, #36	; 0x24
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fd9a 	bl	80041d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a2:	f000 f8b7 	bl	8003814 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036a6:	f000 fbd5 	bl	8003e54 <xTaskResumeAll>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d189      	bne.n	80035c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <xQueueReceive+0x1b4>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e780      	b.n	80035c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c4:	f000 f8a6 	bl	8003814 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036c8:	f000 fbc4 	bl	8003e54 <xTaskResumeAll>
 80036cc:	e77a      	b.n	80035c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d0:	f000 f8a0 	bl	8003814 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036d4:	f000 fbbe 	bl	8003e54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036da:	f000 f8ed 	bl	80038b8 <prvIsQueueEmpty>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f43f af6f 	beq.w	80035c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3730      	adds	r7, #48	; 0x30
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d14d      	bne.n	80037b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 ff7a 	bl	8004618 <xTaskPriorityDisinherit>
 8003724:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e043      	b.n	80037b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d119      	bne.n	8003768 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6858      	ldr	r0, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	461a      	mov	r2, r3
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	f001 ffa8 	bl	8005694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d32b      	bcc.n	80037b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e026      	b.n	80037b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68d8      	ldr	r0, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	461a      	mov	r2, r3
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	f001 ff8e 	bl	8005694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	425b      	negs	r3, r3
 8003782:	441a      	add	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d207      	bcs.n	80037a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	425b      	negs	r3, r3
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d105      	bne.n	80037b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037be:	697b      	ldr	r3, [r7, #20]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d303      	bcc.n	80037fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	461a      	mov	r2, r3
 8003806:	6838      	ldr	r0, [r7, #0]
 8003808:	f001 ff44 	bl	8005694 <memcpy>
	}
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800381c:	f001 fc26 	bl	800506c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003826:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003828:	e011      	b.n	800384e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3324      	adds	r3, #36	; 0x24
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fd1a 	bl	8004270 <xTaskRemoveFromEventList>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003842:	f000 fded 	bl	8004420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	3b01      	subs	r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	dce9      	bgt.n	800382a <prvUnlockQueue+0x16>
 8003856:	e000      	b.n	800385a <prvUnlockQueue+0x46>
					break;
 8003858:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	22ff      	movs	r2, #255	; 0xff
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003862:	f001 fc31 	bl	80050c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003866:	f001 fc01 	bl	800506c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003870:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003872:	e011      	b.n	8003898 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fcf5 	bl	8004270 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800388c:	f000 fdc8 	bl	8004420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003890:	7bbb      	ldrb	r3, [r7, #14]
 8003892:	3b01      	subs	r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003898:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800389c:	2b00      	cmp	r3, #0
 800389e:	dce9      	bgt.n	8003874 <prvUnlockQueue+0x60>
 80038a0:	e000      	b.n	80038a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	22ff      	movs	r2, #255	; 0xff
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038ac:	f001 fc0c 	bl	80050c8 <vPortExitCritical>
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038c0:	f001 fbd4 	bl	800506c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e001      	b.n	80038d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d6:	f001 fbf7 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038ec:	f001 fbbe 	bl	800506c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d102      	bne.n	8003902 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e001      	b.n	8003906 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003906:	f001 fbdf 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e014      	b.n	800394e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003924:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <vQueueAddToRegistry+0x4c>)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003930:	490b      	ldr	r1, [pc, #44]	; (8003960 <vQueueAddToRegistry+0x4c>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <vQueueAddToRegistry+0x4c>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003946:	e005      	b.n	8003954 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d9e7      	bls.n	8003924 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	200049c8 	.word	0x200049c8

08003964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003974:	f001 fb7a 	bl	800506c <vPortEnterCritical>
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397e:	b25b      	sxtb	r3, r3
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d103      	bne.n	800398e <vQueueWaitForMessageRestricted+0x2a>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003994:	b25b      	sxtb	r3, r3
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399a:	d103      	bne.n	80039a4 <vQueueWaitForMessageRestricted+0x40>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a4:	f001 fb90 	bl	80050c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	3324      	adds	r3, #36	; 0x24
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fc2f 	bl	800421c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f7ff ff28 	bl	8003814 <prvUnlockQueue>
	}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08e      	sub	sp, #56	; 0x38
 80039d0:	af04      	add	r7, sp, #16
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <xTaskCreateStatic+0x28>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e7fe      	b.n	80039f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <xTaskCreateStatic+0x42>
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e7fe      	b.n	8003a0c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a0e:	235c      	movs	r3, #92	; 0x5c
 8003a10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b5c      	cmp	r3, #92	; 0x5c
 8003a16:	d009      	beq.n	8003a2c <xTaskCreateStatic+0x60>
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	e7fe      	b.n	8003a2a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01e      	beq.n	8003a72 <xTaskCreateStatic+0xa6>
 8003a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01b      	beq.n	8003a72 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9303      	str	r3, [sp, #12]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f850 	bl	8003b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a6c:	f000 f8dc 	bl	8003c28 <prvAddNewTaskToReadyList>
 8003a70:	e001      	b.n	8003a76 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a76:	697b      	ldr	r3, [r7, #20]
	}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3728      	adds	r7, #40	; 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08c      	sub	sp, #48	; 0x30
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fc03 	bl	80052a0 <pvPortMalloc>
 8003a9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aa2:	205c      	movs	r0, #92	; 0x5c
 8003aa4:	f001 fbfc 	bl	80052a0 <pvPortMalloc>
 8003aa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab6:	e005      	b.n	8003ac4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ab8:	6978      	ldr	r0, [r7, #20]
 8003aba:	f001 fcb3 	bl	8005424 <vPortFree>
 8003abe:	e001      	b.n	8003ac4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f80e 	bl	8003b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aee:	69f8      	ldr	r0, [r7, #28]
 8003af0:	f000 f89a 	bl	8003c28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e002      	b.n	8003b00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295
 8003afe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b00:	69bb      	ldr	r3, [r7, #24]
	}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
 8003b16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	21a5      	movs	r1, #165	; 0xa5
 8003b24:	f001 fdc1 	bl	80056aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	3b01      	subs	r3, #1
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <prvInitialiseNewTask+0x56>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e7fe      	b.n	8003b5e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01f      	beq.n	8003ba6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e012      	b.n	8003b92 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	4413      	add	r3, r2
 8003b72:	7819      	ldrb	r1, [r3, #0]
 8003b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	4413      	add	r3, r2
 8003b7a:	3334      	adds	r3, #52	; 0x34
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	2b0f      	cmp	r3, #15
 8003b96:	d9e9      	bls.n	8003b6c <prvInitialiseNewTask+0x62>
 8003b98:	e000      	b.n	8003b9c <prvInitialiseNewTask+0x92>
			{
				break;
 8003b9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	e003      	b.n	8003bae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	2b37      	cmp	r3, #55	; 0x37
 8003bb2:	d901      	bls.n	8003bb8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bb4:	2337      	movs	r3, #55	; 0x37
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f994 	bl	8002efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff f98f 	bl	8002efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	69b8      	ldr	r0, [r7, #24]
 8003c08:	f001 f90c 	bl	8004e24 <pxPortInitialiseStack>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c30:	f001 fa1c 	bl	800506c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c34:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <prvAddNewTaskToReadyList+0xc4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <prvAddNewTaskToReadyList+0xc4>)
 8003c3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	; (8003cf0 <prvAddNewTaskToReadyList+0xc8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c46:	4a2a      	ldr	r2, [pc, #168]	; (8003cf0 <prvAddNewTaskToReadyList+0xc8>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <prvAddNewTaskToReadyList+0xc4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d110      	bne.n	8003c76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c54:	f000 fc08 	bl	8004468 <prvInitialiseTaskLists>
 8003c58:	e00d      	b.n	8003c76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <prvAddNewTaskToReadyList+0xcc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <prvAddNewTaskToReadyList+0xc8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d802      	bhi.n	8003c76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <prvAddNewTaskToReadyList+0xc8>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <prvAddNewTaskToReadyList+0xd0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <prvAddNewTaskToReadyList+0xd0>)
 8003c7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <prvAddNewTaskToReadyList+0xd0>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <prvAddNewTaskToReadyList+0xd4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d903      	bls.n	8003c9c <prvAddNewTaskToReadyList+0x74>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <prvAddNewTaskToReadyList+0xd4>)
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <prvAddNewTaskToReadyList+0xd8>)
 8003caa:	441a      	add	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f7ff f92f 	bl	8002f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cb8:	f001 fa06 	bl	80050c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <prvAddNewTaskToReadyList+0xcc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00e      	beq.n	8003ce2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <prvAddNewTaskToReadyList+0xc8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d207      	bcs.n	8003ce2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvAddNewTaskToReadyList+0xdc>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000bc0 	.word	0x20000bc0
 8003cf0:	200006ec 	.word	0x200006ec
 8003cf4:	20000bcc 	.word	0x20000bcc
 8003cf8:	20000bdc 	.word	0x20000bdc
 8003cfc:	20000bc8 	.word	0x20000bc8
 8003d00:	200006f0 	.word	0x200006f0
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <vTaskDelay+0x60>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <vTaskDelay+0x2e>
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	e7fe      	b.n	8003d34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d36:	f000 f87f 	bl	8003e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fcd7 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d42:	f000 f887 	bl	8003e54 <xTaskResumeAll>
 8003d46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <vTaskDelay+0x64>)
 8003d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000be8 	.word	0x20000be8
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d7e:	463a      	mov	r2, r7
 8003d80:	1d39      	adds	r1, r7, #4
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f864 	bl	8002e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	9202      	str	r2, [sp, #8]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	4920      	ldr	r1, [pc, #128]	; (8003e20 <vTaskStartScheduler+0xb0>)
 8003da0:	4820      	ldr	r0, [pc, #128]	; (8003e24 <vTaskStartScheduler+0xb4>)
 8003da2:	f7ff fe13 	bl	80039cc <xTaskCreateStatic>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b1f      	ldr	r3, [pc, #124]	; (8003e28 <vTaskStartScheduler+0xb8>)
 8003daa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <vTaskStartScheduler+0xb8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	e001      	b.n	8003dbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d102      	bne.n	8003dca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dc4:	f000 fce8 	bl	8004798 <xTimerCreateTimerTask>
 8003dc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d115      	bne.n	8003dfc <vTaskStartScheduler+0x8c>
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <vTaskStartScheduler+0xbc>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dea:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <vTaskStartScheduler+0xc0>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <vTaskStartScheduler+0xc4>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003df6:	f001 f89b 	bl	8004f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dfa:	e00d      	b.n	8003e18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d109      	bne.n	8003e18 <vTaskStartScheduler+0xa8>
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e7fe      	b.n	8003e16 <vTaskStartScheduler+0xa6>
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08005700 	.word	0x08005700
 8003e24:	08004439 	.word	0x08004439
 8003e28:	20000be4 	.word	0x20000be4
 8003e2c:	20000be0 	.word	0x20000be0
 8003e30:	20000bcc 	.word	0x20000bcc
 8003e34:	20000bc4 	.word	0x20000bc4

08003e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <vTaskSuspendAll+0x18>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a03      	ldr	r2, [pc, #12]	; (8003e50 <vTaskSuspendAll+0x18>)
 8003e44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000be8 	.word	0x20000be8

08003e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <xTaskResumeAll+0x114>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <xTaskResumeAll+0x2a>
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	e7fe      	b.n	8003e7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e7e:	f001 f8f5 	bl	800506c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <xTaskResumeAll+0x114>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	4a37      	ldr	r2, [pc, #220]	; (8003f68 <xTaskResumeAll+0x114>)
 8003e8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8c:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <xTaskResumeAll+0x114>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d162      	bne.n	8003f5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <xTaskResumeAll+0x118>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d05e      	beq.n	8003f5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e9c:	e02f      	b.n	8003efe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e9e:	4b34      	ldr	r3, [pc, #208]	; (8003f70 <xTaskResumeAll+0x11c>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3318      	adds	r3, #24
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff f890 	bl	8002fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff f88b 	bl	8002fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <xTaskResumeAll+0x120>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d903      	bls.n	8003ece <xTaskResumeAll+0x7a>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a2a      	ldr	r2, [pc, #168]	; (8003f74 <xTaskResumeAll+0x120>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <xTaskResumeAll+0x124>)
 8003edc:	441a      	add	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f7ff f816 	bl	8002f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <xTaskResumeAll+0x128>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d302      	bcc.n	8003efe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <xTaskResumeAll+0x12c>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <xTaskResumeAll+0x11c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1cb      	bne.n	8003e9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f0c:	f000 fb46 	bl	800459c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f10:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <xTaskResumeAll+0x130>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f1c:	f000 f846 	bl	8003fac <xTaskIncrementTick>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <xTaskResumeAll+0x12c>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f1      	bne.n	8003f1c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <xTaskResumeAll+0x130>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <xTaskResumeAll+0x12c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d009      	beq.n	8003f5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <xTaskResumeAll+0x134>)
 8003f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f5a:	f001 f8b5 	bl	80050c8 <vPortExitCritical>

	return xAlreadyYielded;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000be8 	.word	0x20000be8
 8003f6c:	20000bc0 	.word	0x20000bc0
 8003f70:	20000b80 	.word	0x20000b80
 8003f74:	20000bc8 	.word	0x20000bc8
 8003f78:	200006f0 	.word	0x200006f0
 8003f7c:	200006ec 	.word	0x200006ec
 8003f80:	20000bd4 	.word	0x20000bd4
 8003f84:	20000bd0 	.word	0x20000bd0
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f92:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <xTaskGetTickCount+0x1c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f98:	687b      	ldr	r3, [r7, #4]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000bc4 	.word	0x20000bc4

08003fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb6:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <xTaskIncrementTick+0x144>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 8088 	bne.w	80040d0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <xTaskIncrementTick+0x148>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <xTaskIncrementTick+0x148>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d11f      	bne.n	8004014 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fd4:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <xTaskIncrementTick+0x46>
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	e7fe      	b.n	8003ff0 <xTaskIncrementTick+0x44>
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4b40      	ldr	r3, [pc, #256]	; (80040fc <xTaskIncrementTick+0x150>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a3e      	ldr	r2, [pc, #248]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4a3e      	ldr	r2, [pc, #248]	; (80040fc <xTaskIncrementTick+0x150>)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <xTaskIncrementTick+0x154>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a3c      	ldr	r2, [pc, #240]	; (8004100 <xTaskIncrementTick+0x154>)
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	f000 fac4 	bl	800459c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004014:	4b3b      	ldr	r3, [pc, #236]	; (8004104 <xTaskIncrementTick+0x158>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d349      	bcc.n	80040b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <xTaskIncrementTick+0x158>)
 800402a:	f04f 32ff 	mov.w	r2, #4294967295
 800402e:	601a      	str	r2, [r3, #0]
					break;
 8004030:	e03f      	b.n	80040b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <xTaskIncrementTick+0x14c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d203      	bcs.n	8004052 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800404a:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <xTaskIncrementTick+0x158>)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004050:	e02f      	b.n	80040b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe ffba 	bl	8002fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe ffb1 	bl	8002fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	4b25      	ldr	r3, [pc, #148]	; (8004108 <xTaskIncrementTick+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d903      	bls.n	8004082 <xTaskIncrementTick+0xd6>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a22      	ldr	r2, [pc, #136]	; (8004108 <xTaskIncrementTick+0x15c>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <xTaskIncrementTick+0x160>)
 8004090:	441a      	add	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7fe ff3c 	bl	8002f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <xTaskIncrementTick+0x164>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3b8      	bcc.n	800401e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040b0:	e7b5      	b.n	800401e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040b2:	4b17      	ldr	r3, [pc, #92]	; (8004110 <xTaskIncrementTick+0x164>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4914      	ldr	r1, [pc, #80]	; (800410c <xTaskIncrementTick+0x160>)
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d907      	bls.n	80040da <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	e004      	b.n	80040da <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <xTaskIncrementTick+0x168>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <xTaskIncrementTick+0x168>)
 80040d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <xTaskIncrementTick+0x16c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040e6:	697b      	ldr	r3, [r7, #20]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000be8 	.word	0x20000be8
 80040f4:	20000bc4 	.word	0x20000bc4
 80040f8:	20000b78 	.word	0x20000b78
 80040fc:	20000b7c 	.word	0x20000b7c
 8004100:	20000bd8 	.word	0x20000bd8
 8004104:	20000be0 	.word	0x20000be0
 8004108:	20000bc8 	.word	0x20000bc8
 800410c:	200006f0 	.word	0x200006f0
 8004110:	200006ec 	.word	0x200006ec
 8004114:	20000bd0 	.word	0x20000bd0
 8004118:	20000bd4 	.word	0x20000bd4

0800411c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004122:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <vTaskSwitchContext+0xa4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800412a:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <vTaskSwitchContext+0xa8>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004130:	e040      	b.n	80041b4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <vTaskSwitchContext+0xa8>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <vTaskSwitchContext+0xac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e00f      	b.n	8004160 <vTaskSwitchContext+0x44>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <vTaskSwitchContext+0x3e>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	e7fe      	b.n	8004158 <vTaskSwitchContext+0x3c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3b01      	subs	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	491a      	ldr	r1, [pc, #104]	; (80041cc <vTaskSwitchContext+0xb0>)
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0e5      	beq.n	8004140 <vTaskSwitchContext+0x24>
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <vTaskSwitchContext+0xb0>)
 8004180:	4413      	add	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	3308      	adds	r3, #8
 8004196:	429a      	cmp	r2, r3
 8004198:	d104      	bne.n	80041a4 <vTaskSwitchContext+0x88>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <vTaskSwitchContext+0xb4>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4a06      	ldr	r2, [pc, #24]	; (80041c8 <vTaskSwitchContext+0xac>)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000be8 	.word	0x20000be8
 80041c4:	20000bd4 	.word	0x20000bd4
 80041c8:	20000bc8 	.word	0x20000bc8
 80041cc:	200006f0 	.word	0x200006f0
 80041d0:	200006ec 	.word	0x200006ec

080041d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <vTaskPlaceOnEventList+0x24>
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e7fe      	b.n	80041f6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <vTaskPlaceOnEventList+0x44>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3318      	adds	r3, #24
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fe feac 	bl	8002f5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004206:	2101      	movs	r1, #1
 8004208:	6838      	ldr	r0, [r7, #0]
 800420a:	f000 fa71 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200006ec 	.word	0x200006ec

0800421c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <vTaskPlaceOnEventListRestricted+0x26>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e7fe      	b.n	8004240 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <vTaskPlaceOnEventListRestricted+0x50>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3318      	adds	r3, #24
 8004248:	4619      	mov	r1, r3
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7fe fe63 	bl	8002f16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68b8      	ldr	r0, [r7, #8]
 8004260:	f000 fa46 	bl	80046f0 <prvAddCurrentTaskToDelayedList>
	}
 8004264:	bf00      	nop
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200006ec 	.word	0x200006ec

08004270 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <xTaskRemoveFromEventList+0x2a>
 8004286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e7fe      	b.n	8004298 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3318      	adds	r3, #24
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fe96 	bl	8002fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <xTaskRemoveFromEventList+0xac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11d      	bne.n	80042e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fe8d 	bl	8002fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d903      	bls.n	80042ca <xTaskRemoveFromEventList+0x5a>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <xTaskRemoveFromEventList+0xb0>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <xTaskRemoveFromEventList+0xb4>)
 80042d8:	441a      	add	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe fe18 	bl	8002f16 <vListInsertEnd>
 80042e6:	e005      	b.n	80042f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	3318      	adds	r3, #24
 80042ec:	4619      	mov	r1, r3
 80042ee:	480e      	ldr	r0, [pc, #56]	; (8004328 <xTaskRemoveFromEventList+0xb8>)
 80042f0:	f7fe fe11 	bl	8002f16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <xTaskRemoveFromEventList+0xbc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	429a      	cmp	r2, r3
 8004300:	d905      	bls.n	800430e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004302:	2301      	movs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <xTaskRemoveFromEventList+0xc0>)
 8004308:	2201      	movs	r2, #1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e001      	b.n	8004312 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000be8 	.word	0x20000be8
 8004320:	20000bc8 	.word	0x20000bc8
 8004324:	200006f0 	.word	0x200006f0
 8004328:	20000b80 	.word	0x20000b80
 800432c:	200006ec 	.word	0x200006ec
 8004330:	20000bd4 	.word	0x20000bd4

08004334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <vTaskInternalSetTimeOutState+0x24>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <vTaskInternalSetTimeOutState+0x28>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	20000bd8 	.word	0x20000bd8
 800435c:	20000bc4 	.word	0x20000bc4

08004360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xTaskCheckForTimeOut+0x24>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	e7fe      	b.n	8004382 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <xTaskCheckForTimeOut+0x3e>
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e7fe      	b.n	800439c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800439e:	f000 fe65 	bl	800506c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <xTaskCheckForTimeOut+0xb8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d102      	bne.n	80043c2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	e023      	b.n	800440a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <xTaskCheckForTimeOut+0xbc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d007      	beq.n	80043de <xTaskCheckForTimeOut+0x7e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e015      	b.n	800440a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d20b      	bcs.n	8004400 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff9d 	bl	8004334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e004      	b.n	800440a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800440a:	f000 fe5d 	bl	80050c8 <vPortExitCritical>

	return xReturn;
 800440e:	69fb      	ldr	r3, [r7, #28]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000bc4 	.word	0x20000bc4
 800441c:	20000bd8 	.word	0x20000bd8

08004420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <vTaskMissedYield+0x14>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000bd4 	.word	0x20000bd4

08004438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004440:	f000 f852 	bl	80044e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <prvIdleTask+0x28>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d9f9      	bls.n	8004440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <prvIdleTask+0x2c>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800445c:	e7f0      	b.n	8004440 <prvIdleTask+0x8>
 800445e:	bf00      	nop
 8004460:	200006f0 	.word	0x200006f0
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	e00c      	b.n	800448e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <prvInitialiseTaskLists+0x60>)
 8004480:	4413      	add	r3, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fd1a 	bl	8002ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3301      	adds	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b37      	cmp	r3, #55	; 0x37
 8004492:	d9ef      	bls.n	8004474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004494:	480d      	ldr	r0, [pc, #52]	; (80044cc <prvInitialiseTaskLists+0x64>)
 8004496:	f7fe fd11 	bl	8002ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449a:	480d      	ldr	r0, [pc, #52]	; (80044d0 <prvInitialiseTaskLists+0x68>)
 800449c:	f7fe fd0e 	bl	8002ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a0:	480c      	ldr	r0, [pc, #48]	; (80044d4 <prvInitialiseTaskLists+0x6c>)
 80044a2:	f7fe fd0b 	bl	8002ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044a6:	480c      	ldr	r0, [pc, #48]	; (80044d8 <prvInitialiseTaskLists+0x70>)
 80044a8:	f7fe fd08 	bl	8002ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044ac:	480b      	ldr	r0, [pc, #44]	; (80044dc <prvInitialiseTaskLists+0x74>)
 80044ae:	f7fe fd05 	bl	8002ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <prvInitialiseTaskLists+0x78>)
 80044b4:	4a05      	ldr	r2, [pc, #20]	; (80044cc <prvInitialiseTaskLists+0x64>)
 80044b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <prvInitialiseTaskLists+0x7c>)
 80044ba:	4a05      	ldr	r2, [pc, #20]	; (80044d0 <prvInitialiseTaskLists+0x68>)
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200006f0 	.word	0x200006f0
 80044cc:	20000b50 	.word	0x20000b50
 80044d0:	20000b64 	.word	0x20000b64
 80044d4:	20000b80 	.word	0x20000b80
 80044d8:	20000b94 	.word	0x20000b94
 80044dc:	20000bac 	.word	0x20000bac
 80044e0:	20000b78 	.word	0x20000b78
 80044e4:	20000b7c 	.word	0x20000b7c

080044e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ee:	e019      	b.n	8004524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044f0:	f000 fdbc 	bl	800506c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <prvCheckTasksWaitingTermination+0x4c>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fd65 	bl	8002fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <prvCheckTasksWaitingTermination+0x50>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <prvCheckTasksWaitingTermination+0x50>)
 800450e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvCheckTasksWaitingTermination+0x54>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3b01      	subs	r3, #1
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <prvCheckTasksWaitingTermination+0x54>)
 8004518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800451a:	f000 fdd5 	bl	80050c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f80e 	bl	8004540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <prvCheckTasksWaitingTermination+0x54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e1      	bne.n	80044f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000b94 	.word	0x20000b94
 8004538:	20000bc0 	.word	0x20000bc0
 800453c:	20000ba8 	.word	0x20000ba8

08004540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800454e:	2b00      	cmp	r3, #0
 8004550:	d108      	bne.n	8004564 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff64 	bl	8005424 <vPortFree>
				vPortFree( pxTCB );
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 ff61 	bl	8005424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004562:	e017      	b.n	8004594 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800456a:	2b01      	cmp	r3, #1
 800456c:	d103      	bne.n	8004576 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 ff58 	bl	8005424 <vPortFree>
	}
 8004574:	e00e      	b.n	8004594 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800457c:	2b02      	cmp	r3, #2
 800457e:	d009      	beq.n	8004594 <prvDeleteTCB+0x54>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	e7fe      	b.n	8004592 <prvDeleteTCB+0x52>
	}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <prvResetNextTaskUnblockTime+0x38>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <prvResetNextTaskUnblockTime+0x3c>)
 80045ae:	f04f 32ff 	mov.w	r2, #4294967295
 80045b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045b4:	e008      	b.n	80045c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <prvResetNextTaskUnblockTime+0x38>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <prvResetNextTaskUnblockTime+0x3c>)
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20000b78 	.word	0x20000b78
 80045d8:	20000be0 	.word	0x20000be0

080045dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <xTaskGetSchedulerState+0x34>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ea:	2301      	movs	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e008      	b.n	8004602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f0:	4b08      	ldr	r3, [pc, #32]	; (8004614 <xTaskGetSchedulerState+0x38>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045f8:	2302      	movs	r3, #2
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	e001      	b.n	8004602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004602:	687b      	ldr	r3, [r7, #4]
	}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	20000bcc 	.word	0x20000bcc
 8004614:	20000be8 	.word	0x20000be8

08004618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d054      	beq.n	80046d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800462e:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <xTaskPriorityDisinherit+0xcc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d009      	beq.n	800464c <xTaskPriorityDisinherit+0x34>
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e7fe      	b.n	800464a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004650:	2b00      	cmp	r3, #0
 8004652:	d109      	bne.n	8004668 <xTaskPriorityDisinherit+0x50>
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	e7fe      	b.n	8004666 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	429a      	cmp	r2, r3
 800467c:	d02c      	beq.n	80046d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d128      	bne.n	80046d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fca0 	bl	8002fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xTaskPriorityDisinherit+0xd0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <xTaskPriorityDisinherit+0xa0>
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <xTaskPriorityDisinherit+0xd0>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a09      	ldr	r2, [pc, #36]	; (80046ec <xTaskPriorityDisinherit+0xd4>)
 80046c6:	441a      	add	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3304      	adds	r3, #4
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fe fc21 	bl	8002f16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046d8:	697b      	ldr	r3, [r7, #20]
	}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200006ec 	.word	0x200006ec
 80046e8:	20000bc8 	.word	0x20000bc8
 80046ec:	200006f0 	.word	0x200006f0

080046f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <prvAddCurrentTaskToDelayedList+0x90>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004700:	4b20      	ldr	r3, [pc, #128]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fc62 	bl	8002fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004712:	d10a      	bne.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d007      	beq.n	800472a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4819      	ldr	r0, [pc, #100]	; (8004788 <prvAddCurrentTaskToDelayedList+0x98>)
 8004724:	f7fe fbf7 	bl	8002f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004728:	e026      	b.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	429a      	cmp	r2, r3
 8004740:	d209      	bcs.n	8004756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fc05 	bl	8002f5e <vListInsert>
}
 8004754:	e010      	b.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <prvAddCurrentTaskToDelayedList+0x94>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fe fbfb 	bl	8002f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	d202      	bcs.n	8004778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	20000bc4 	.word	0x20000bc4
 8004784:	200006ec 	.word	0x200006ec
 8004788:	20000bac 	.word	0x20000bac
 800478c:	20000b7c 	.word	0x20000b7c
 8004790:	20000b78 	.word	0x20000b78
 8004794:	20000be0 	.word	0x20000be0

08004798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08a      	sub	sp, #40	; 0x28
 800479c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047a2:	f000 faff 	bl	8004da4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <xTimerCreateTimerTask+0x80>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d021      	beq.n	80047f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047b6:	1d3a      	adds	r2, r7, #4
 80047b8:	f107 0108 	add.w	r1, r7, #8
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe fb61 	bl	8002e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	9202      	str	r2, [sp, #8]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2302      	movs	r3, #2
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	460a      	mov	r2, r1
 80047d8:	4910      	ldr	r1, [pc, #64]	; (800481c <xTimerCreateTimerTask+0x84>)
 80047da:	4811      	ldr	r0, [pc, #68]	; (8004820 <xTimerCreateTimerTask+0x88>)
 80047dc:	f7ff f8f6 	bl	80039cc <xTaskCreateStatic>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <xTimerCreateTimerTask+0x8c>)
 80047e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <xTimerCreateTimerTask+0x8c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xTimerCreateTimerTask+0x74>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e7fe      	b.n	800480a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800480c:	697b      	ldr	r3, [r7, #20]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000c1c 	.word	0x20000c1c
 800481c:	08005708 	.word	0x08005708
 8004820:	08004959 	.word	0x08004959
 8004824:	20000c20 	.word	0x20000c20

08004828 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <xTimerGenericCommand+0x2c>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	e7fe      	b.n	8004852 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <xTimerGenericCommand+0x94>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d02a      	beq.n	80048b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b05      	cmp	r3, #5
 800486c:	dc18      	bgt.n	80048a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800486e:	f7ff feb5 	bl	80045dc <xTaskGetSchedulerState>
 8004872:	4603      	mov	r3, r0
 8004874:	2b02      	cmp	r3, #2
 8004876:	d109      	bne.n	800488c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004878:	4b10      	ldr	r3, [pc, #64]	; (80048bc <xTimerGenericCommand+0x94>)
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	f107 0110 	add.w	r1, r7, #16
 8004880:	2300      	movs	r3, #0
 8004882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004884:	f7fe fccc 	bl	8003220 <xQueueGenericSend>
 8004888:	6278      	str	r0, [r7, #36]	; 0x24
 800488a:	e012      	b.n	80048b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <xTimerGenericCommand+0x94>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	f107 0110 	add.w	r1, r7, #16
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	f7fe fcc2 	bl	8003220 <xQueueGenericSend>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24
 800489e:	e008      	b.n	80048b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048a0:	4b06      	ldr	r3, [pc, #24]	; (80048bc <xTimerGenericCommand+0x94>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	f107 0110 	add.w	r1, r7, #16
 80048a8:	2300      	movs	r3, #0
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	f7fe fdb2 	bl	8003414 <xQueueGenericSendFromISR>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3728      	adds	r7, #40	; 0x28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000c1c 	.word	0x20000c1c

080048c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4b22      	ldr	r3, [pc, #136]	; (8004954 <prvProcessExpiredTimer+0x94>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fb79 	bl	8002fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d021      	beq.n	8004930 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	699a      	ldr	r2, [r3, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	18d1      	adds	r1, r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	6978      	ldr	r0, [r7, #20]
 80048fa:	f000 f8d1 	bl	8004aa0 <prvInsertTimerInActiveList>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01e      	beq.n	8004942 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004904:	2300      	movs	r3, #0
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2300      	movs	r3, #0
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	2100      	movs	r1, #0
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f7ff ff8a 	bl	8004828 <xTimerGenericCommand>
 8004914:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d112      	bne.n	8004942 <prvProcessExpiredTimer+0x82>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e7fe      	b.n	800492e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	b2da      	uxtb	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	4798      	blx	r3
}
 800494a:	bf00      	nop
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000c14 	.word	0x20000c14

08004958 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004960:	f107 0308 	add.w	r3, r7, #8
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f857 	bl	8004a18 <prvGetNextExpireTime>
 800496a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4619      	mov	r1, r3
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f803 	bl	800497c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004976:	f000 f8d5 	bl	8004b24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800497a:	e7f1      	b.n	8004960 <prvTimerTask+0x8>

0800497c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004986:	f7ff fa57 	bl	8003e38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800498a:	f107 0308 	add.w	r3, r7, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f866 	bl	8004a60 <prvSampleTimeNow>
 8004994:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d130      	bne.n	80049fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <prvProcessTimerOrBlockTask+0x3c>
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d806      	bhi.n	80049b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049aa:	f7ff fa53 	bl	8003e54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff85 	bl	80048c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049b6:	e024      	b.n	8004a02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <prvProcessTimerOrBlockTask+0x90>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <prvProcessTimerOrBlockTask+0x50>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <prvProcessTimerOrBlockTask+0x52>
 80049cc:	2300      	movs	r3, #0
 80049ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <prvProcessTimerOrBlockTask+0x94>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	f7fe ffc1 	bl	8003964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049e2:	f7ff fa37 	bl	8003e54 <xTaskResumeAll>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <prvProcessTimerOrBlockTask+0x98>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	f3bf 8f6f 	isb	sy
}
 80049fc:	e001      	b.n	8004a02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049fe:	f7ff fa29 	bl	8003e54 <xTaskResumeAll>
}
 8004a02:	bf00      	nop
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000c18 	.word	0x20000c18
 8004a10:	20000c1c 	.word	0x20000c1c
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a20:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <prvGetNextExpireTime+0x44>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <prvGetNextExpireTime+0x16>
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	e000      	b.n	8004a30 <prvGetNextExpireTime+0x18>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <prvGetNextExpireTime+0x44>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e001      	b.n	8004a4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000c14 	.word	0x20000c14

08004a60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a68:	f7ff fa90 	bl	8003f8c <xTaskGetTickCount>
 8004a6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <prvSampleTimeNow+0x3c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d205      	bcs.n	8004a84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a78:	f000 f930 	bl	8004cdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e002      	b.n	8004a8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a8a:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <prvSampleTimeNow+0x3c>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000c24 	.word	0x20000c24

08004aa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d812      	bhi.n	8004aec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e01b      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ada:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <prvInsertTimerInActiveList+0x7c>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f7fe fa3a 	bl	8002f5e <vListInsert>
 8004aea:	e012      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d206      	bcs.n	8004b02 <prvInsertTimerInActiveList+0x62>
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e007      	b.n	8004b12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <prvInsertTimerInActiveList+0x80>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fe fa26 	bl	8002f5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b12:	697b      	ldr	r3, [r7, #20]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	20000c18 	.word	0x20000c18
 8004b20:	20000c14 	.word	0x20000c14

08004b24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	; 0x38
 8004b28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b2a:	e0c6      	b.n	8004cba <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da17      	bge.n	8004b62 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	3304      	adds	r3, #4
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <prvProcessReceivedCommands+0x2e>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e7fe      	b.n	8004b50 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	6850      	ldr	r0, [r2, #4]
 8004b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f2c0 80a7 	blt.w	8004cb8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fa28 	bl	8002fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b80:	463b      	mov	r3, r7
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ff6c 	bl	8004a60 <prvSampleTimeNow>
 8004b88:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	f200 8094 	bhi.w	8004cba <prvProcessReceivedCommands+0x196>
 8004b92:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <prvProcessReceivedCommands+0x74>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004c33 	.word	0x08004c33
 8004ba8:	08004c47 	.word	0x08004c47
 8004bac:	08004c8f 	.word	0x08004c8f
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc1 	.word	0x08004bc1
 8004bb8:	08004c33 	.word	0x08004c33
 8004bbc:	08004c47 	.word	0x08004c47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	18d1      	adds	r1, r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004be0:	f7ff ff5e 	bl	8004aa0 <prvInsertTimerInActiveList>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d067      	beq.n	8004cba <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05c      	beq.n	8004cba <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	441a      	add	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c12:	f7ff fe09 	bl	8004828 <xTimerGenericCommand>
 8004c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d14d      	bne.n	8004cba <prvProcessReceivedCommands+0x196>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e7fe      	b.n	8004c30 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004c44:	e039      	b.n	8004cba <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <prvProcessReceivedCommands+0x156>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e7fe      	b.n	8004c78 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c88:	f7ff ff0a 	bl	8004aa0 <prvInsertTimerInActiveList>
					break;
 8004c8c:	e015      	b.n	8004cba <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9e:	f000 fbc1 	bl	8005424 <vPortFree>
 8004ca2:	e00a      	b.n	8004cba <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cb6:	e000      	b.n	8004cba <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cba:	4b07      	ldr	r3, [pc, #28]	; (8004cd8 <prvProcessReceivedCommands+0x1b4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	1d39      	adds	r1, r7, #4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc3a 	bl	800353c <xQueueReceive>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f af2e 	bne.w	8004b2c <prvProcessReceivedCommands+0x8>
	}
}
 8004cd0:	bf00      	nop
 8004cd2:	3730      	adds	r7, #48	; 0x30
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000c1c 	.word	0x20000c1c

08004cdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ce2:	e047      	b.n	8004d74 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b2b      	ldr	r3, [pc, #172]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe f967 	bl	8002fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02d      	beq.n	8004d74 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d90e      	bls.n	8004d48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d36:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7fe f90c 	bl	8002f5e <vListInsert>
 8004d46:	e015      	b.n	8004d74 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	2100      	movs	r1, #0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff fd68 	bl	8004828 <xTimerGenericCommand>
 8004d58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d109      	bne.n	8004d74 <prvSwitchTimerLists+0x98>
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	e7fe      	b.n	8004d72 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d74:	4b09      	ldr	r3, [pc, #36]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1b2      	bne.n	8004ce4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <prvSwitchTimerLists+0xc4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <prvSwitchTimerLists+0xc0>)
 8004d8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <prvSwitchTimerLists+0xc4>)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6013      	str	r3, [r2, #0]
}
 8004d92:	bf00      	nop
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000c14 	.word	0x20000c14
 8004da0:	20000c18 	.word	0x20000c18

08004da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004daa:	f000 f95f 	bl	800506c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <prvCheckForValidListAndQueue+0x60>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d120      	bne.n	8004df8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004db6:	4814      	ldr	r0, [pc, #80]	; (8004e08 <prvCheckForValidListAndQueue+0x64>)
 8004db8:	f7fe f880 	bl	8002ebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dbc:	4813      	ldr	r0, [pc, #76]	; (8004e0c <prvCheckForValidListAndQueue+0x68>)
 8004dbe:	f7fe f87d 	bl	8002ebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <prvCheckForValidListAndQueue+0x6c>)
 8004dc4:	4a10      	ldr	r2, [pc, #64]	; (8004e08 <prvCheckForValidListAndQueue+0x64>)
 8004dc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <prvCheckForValidListAndQueue+0x70>)
 8004dca:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <prvCheckForValidListAndQueue+0x68>)
 8004dcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <prvCheckForValidListAndQueue+0x74>)
 8004dd4:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <prvCheckForValidListAndQueue+0x78>)
 8004dd6:	2110      	movs	r1, #16
 8004dd8:	200a      	movs	r0, #10
 8004dda:	f7fe f98b 	bl	80030f4 <xQueueGenericCreateStatic>
 8004dde:	4602      	mov	r2, r0
 8004de0:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <prvCheckForValidListAndQueue+0x60>)
 8004de2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <prvCheckForValidListAndQueue+0x60>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <prvCheckForValidListAndQueue+0x60>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	490b      	ldr	r1, [pc, #44]	; (8004e20 <prvCheckForValidListAndQueue+0x7c>)
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fd8e 	bl	8003914 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004df8:	f000 f966 	bl	80050c8 <vPortExitCritical>
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000c1c 	.word	0x20000c1c
 8004e08:	20000bec 	.word	0x20000bec
 8004e0c:	20000c00 	.word	0x20000c00
 8004e10:	20000c14 	.word	0x20000c14
 8004e14:	20000c18 	.word	0x20000c18
 8004e18:	20000cc8 	.word	0x20000cc8
 8004e1c:	20000c28 	.word	0x20000c28
 8004e20:	08005710 	.word	0x08005710

08004e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3b04      	subs	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b04      	subs	r3, #4
 8004e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e54:	4a0c      	ldr	r2, [pc, #48]	; (8004e88 <pxPortInitialiseStack+0x64>)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b14      	subs	r3, #20
 8004e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f06f 0202 	mvn.w	r2, #2
 8004e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b20      	subs	r3, #32
 8004e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	08004e8d 	.word	0x08004e8d

08004e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <prvTaskExitError+0x50>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d009      	beq.n	8004eb4 <prvTaskExitError+0x28>
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e7fe      	b.n	8004eb2 <prvTaskExitError+0x26>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ec6:	bf00      	nop
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0fc      	beq.n	8004ec8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000010 	.word	0x20000010

08004ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <pxCurrentTCBConst2>)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	6808      	ldr	r0, [r1, #0]
 8004ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eea:	f380 8809 	msr	PSP, r0
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f04f 0000 	mov.w	r0, #0
 8004ef6:	f380 8811 	msr	BASEPRI, r0
 8004efa:	4770      	bx	lr
 8004efc:	f3af 8000 	nop.w

08004f00 <pxCurrentTCBConst2>:
 8004f00:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop

08004f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f08:	4808      	ldr	r0, [pc, #32]	; (8004f2c <prvPortStartFirstTask+0x24>)
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	6800      	ldr	r0, [r0, #0]
 8004f0e:	f380 8808 	msr	MSP, r0
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8814 	msr	CONTROL, r0
 8004f1a:	b662      	cpsie	i
 8004f1c:	b661      	cpsie	f
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	df00      	svc	0
 8004f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed08 	.word	0xe000ed08

08004f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f36:	4b44      	ldr	r3, [pc, #272]	; (8005048 <xPortStartScheduler+0x118>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a44      	ldr	r2, [pc, #272]	; (800504c <xPortStartScheduler+0x11c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <xPortStartScheduler+0x24>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e7fe      	b.n	8004f52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f54:	4b3c      	ldr	r3, [pc, #240]	; (8005048 <xPortStartScheduler+0x118>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a3d      	ldr	r2, [pc, #244]	; (8005050 <xPortStartScheduler+0x120>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d109      	bne.n	8004f72 <xPortStartScheduler+0x42>
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e7fe      	b.n	8004f70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f72:	4b38      	ldr	r3, [pc, #224]	; (8005054 <xPortStartScheduler+0x124>)
 8004f74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	22ff      	movs	r2, #255	; 0xff
 8004f82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b30      	ldr	r3, [pc, #192]	; (8005058 <xPortStartScheduler+0x128>)
 8004f98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f9a:	4b30      	ldr	r3, [pc, #192]	; (800505c <xPortStartScheduler+0x12c>)
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fa0:	e009      	b.n	8004fb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004fa2:	4b2e      	ldr	r3, [pc, #184]	; (800505c <xPortStartScheduler+0x12c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <xPortStartScheduler+0x12c>)
 8004faa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d0ef      	beq.n	8004fa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <xPortStartScheduler+0x12c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1c3 0307 	rsb	r3, r3, #7
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d009      	beq.n	8004fe2 <xPortStartScheduler+0xb2>
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	e7fe      	b.n	8004fe0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <xPortStartScheduler+0x12c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	4a1c      	ldr	r2, [pc, #112]	; (800505c <xPortStartScheduler+0x12c>)
 8004fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fec:	4b1b      	ldr	r3, [pc, #108]	; (800505c <xPortStartScheduler+0x12c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <xPortStartScheduler+0x12c>)
 8004ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005000:	4b17      	ldr	r3, [pc, #92]	; (8005060 <xPortStartScheduler+0x130>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <xPortStartScheduler+0x130>)
 8005006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800500a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <xPortStartScheduler+0x130>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <xPortStartScheduler+0x130>)
 8005012:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005018:	f000 f8d6 	bl	80051c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <xPortStartScheduler+0x134>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005022:	f000 f8f5 	bl	8005210 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005026:	4b10      	ldr	r3, [pc, #64]	; (8005068 <xPortStartScheduler+0x138>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <xPortStartScheduler+0x138>)
 800502c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005030:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005032:	f7ff ff69 	bl	8004f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005036:	f7ff f871 	bl	800411c <vTaskSwitchContext>
	prvTaskExitError();
 800503a:	f7ff ff27 	bl	8004e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	e000ed00 	.word	0xe000ed00
 800504c:	410fc271 	.word	0x410fc271
 8005050:	410fc270 	.word	0x410fc270
 8005054:	e000e400 	.word	0xe000e400
 8005058:	20000d18 	.word	0x20000d18
 800505c:	20000d1c 	.word	0x20000d1c
 8005060:	e000ed20 	.word	0xe000ed20
 8005064:	20000010 	.word	0x20000010
 8005068:	e000ef34 	.word	0xe000ef34

0800506c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <vPortEnterCritical+0x54>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3301      	adds	r3, #1
 800508a:	4a0d      	ldr	r2, [pc, #52]	; (80050c0 <vPortEnterCritical+0x54>)
 800508c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <vPortEnterCritical+0x54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10e      	bne.n	80050b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortEnterCritical+0x58>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <vPortEnterCritical+0x48>
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	e7fe      	b.n	80050b2 <vPortEnterCritical+0x46>
	}
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	20000010 	.word	0x20000010
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ce:	4b11      	ldr	r3, [pc, #68]	; (8005114 <vPortExitCritical+0x4c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <vPortExitCritical+0x22>
 80050d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	e7fe      	b.n	80050e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80050ea:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <vPortExitCritical+0x4c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a08      	ldr	r2, [pc, #32]	; (8005114 <vPortExitCritical+0x4c>)
 80050f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <vPortExitCritical+0x4c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <vPortExitCritical+0x3e>
 80050fc:	2300      	movs	r3, #0
 80050fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010
	...

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f01e 0f10 	tst.w	lr, #16
 8005130:	bf08      	it	eq
 8005132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005144:	f380 8811 	msr	BASEPRI, r0
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f7fe ffe4 	bl	800411c <vTaskSwitchContext>
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f380 8811 	msr	BASEPRI, r0
 800515c:	bc09      	pop	{r0, r3}
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005166:	f01e 0f10 	tst.w	lr, #16
 800516a:	bf08      	it	eq
 800516c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005170:	f380 8809 	msr	PSP, r0
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst>:
 8005180:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051a0:	f7fe ff04 	bl	8003fac <xTaskIncrementTick>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SysTick_Handler+0x3c>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <vPortSetupTimerInterrupt+0x34>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortSetupTimerInterrupt+0x38>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <vPortSetupTimerInterrupt+0x3c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <vPortSetupTimerInterrupt+0x40>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <vPortSetupTimerInterrupt+0x44>)
 80051e6:	3b01      	subs	r3, #1
 80051e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ea:	4b04      	ldr	r3, [pc, #16]	; (80051fc <vPortSetupTimerInterrupt+0x34>)
 80051ec:	2207      	movs	r2, #7
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000e010 	.word	0xe000e010
 8005200:	e000e018 	.word	0xe000e018
 8005204:	20000004 	.word	0x20000004
 8005208:	10624dd3 	.word	0x10624dd3
 800520c:	e000e014 	.word	0xe000e014

08005210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005210:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005220 <vPortEnableVFP+0x10>
 8005214:	6801      	ldr	r1, [r0, #0]
 8005216:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800521a:	6001      	str	r1, [r0, #0]
 800521c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800521e:	bf00      	nop
 8005220:	e000ed88 	.word	0xe000ed88

08005224 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800522a:	f3ef 8305 	mrs	r3, IPSR
 800522e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	d913      	bls.n	800525e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <vPortValidateInterruptPriority+0x6c>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005240:	4b14      	ldr	r3, [pc, #80]	; (8005294 <vPortValidateInterruptPriority+0x70>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	7afa      	ldrb	r2, [r7, #11]
 8005246:	429a      	cmp	r2, r3
 8005248:	d209      	bcs.n	800525e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	e7fe      	b.n	800525c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <vPortValidateInterruptPriority+0x74>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <vPortValidateInterruptPriority+0x78>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d909      	bls.n	8005282 <vPortValidateInterruptPriority+0x5e>
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	e7fe      	b.n	8005280 <vPortValidateInterruptPriority+0x5c>
	}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000e3f0 	.word	0xe000e3f0
 8005294:	20000d18 	.word	0x20000d18
 8005298:	e000ed0c 	.word	0xe000ed0c
 800529c:	20000d1c 	.word	0x20000d1c

080052a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052ac:	f7fe fdc4 	bl	8003e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052b0:	4b57      	ldr	r3, [pc, #348]	; (8005410 <pvPortMalloc+0x170>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052b8:	f000 f90c 	bl	80054d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052bc:	4b55      	ldr	r3, [pc, #340]	; (8005414 <pvPortMalloc+0x174>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 808c 	bne.w	80053e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01c      	beq.n	800530a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80052d0:	2208      	movs	r2, #8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d013      	beq.n	800530a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f023 0307 	bic.w	r3, r3, #7
 80052e8:	3308      	adds	r3, #8
 80052ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <pvPortMalloc+0x6a>
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e7fe      	b.n	8005308 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d068      	beq.n	80053e2 <pvPortMalloc+0x142>
 8005310:	4b41      	ldr	r3, [pc, #260]	; (8005418 <pvPortMalloc+0x178>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d863      	bhi.n	80053e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <pvPortMalloc+0x17c>)
 800531c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800531e:	4b3f      	ldr	r3, [pc, #252]	; (800541c <pvPortMalloc+0x17c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005324:	e004      	b.n	8005330 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d903      	bls.n	8005342 <pvPortMalloc+0xa2>
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f1      	bne.n	8005326 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <pvPortMalloc+0x170>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	429a      	cmp	r2, r3
 800534a:	d04a      	beq.n	80053e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2208      	movs	r2, #8
 8005352:	4413      	add	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	2308      	movs	r3, #8
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	429a      	cmp	r2, r3
 800536c:	d91e      	bls.n	80053ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <pvPortMalloc+0xf4>
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	e7fe      	b.n	8005392 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad2      	subs	r2, r2, r3
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053a6:	69b8      	ldr	r0, [r7, #24]
 80053a8:	f000 f8f6 	bl	8005598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <pvPortMalloc+0x178>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <pvPortMalloc+0x178>)
 80053b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <pvPortMalloc+0x178>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b18      	ldr	r3, [pc, #96]	; (8005420 <pvPortMalloc+0x180>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d203      	bcs.n	80053ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <pvPortMalloc+0x178>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a15      	ldr	r2, [pc, #84]	; (8005420 <pvPortMalloc+0x180>)
 80053cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <pvPortMalloc+0x174>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053e2:	f7fe fd37 	bl	8003e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <pvPortMalloc+0x164>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e7fe      	b.n	8005402 <pvPortMalloc+0x162>
	return pvReturn;
 8005404:	69fb      	ldr	r3, [r7, #28]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20004928 	.word	0x20004928
 8005414:	20004934 	.word	0x20004934
 8005418:	2000492c 	.word	0x2000492c
 800541c:	20004920 	.word	0x20004920
 8005420:	20004930 	.word	0x20004930

08005424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d046      	beq.n	80054c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005436:	2308      	movs	r3, #8
 8005438:	425b      	negs	r3, r3
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4413      	add	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4b20      	ldr	r3, [pc, #128]	; (80054cc <vPortFree+0xa8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <vPortFree+0x42>
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e7fe      	b.n	8005464 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <vPortFree+0x5e>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60bb      	str	r3, [r7, #8]
 8005480:	e7fe      	b.n	8005480 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	4b11      	ldr	r3, [pc, #68]	; (80054cc <vPortFree+0xa8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d019      	beq.n	80054c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d115      	bne.n	80054c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <vPortFree+0xa8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a8:	f7fe fcc6 	bl	8003e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <vPortFree+0xac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4413      	add	r3, r2
 80054b6:	4a06      	ldr	r2, [pc, #24]	; (80054d0 <vPortFree+0xac>)
 80054b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ba:	6938      	ldr	r0, [r7, #16]
 80054bc:	f000 f86c 	bl	8005598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054c0:	f7fe fcc8 	bl	8003e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20004934 	.word	0x20004934
 80054d0:	2000492c 	.word	0x2000492c

080054d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <prvHeapInit+0xac>)
 80054e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3307      	adds	r3, #7
 80054f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0307 	bic.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a1f      	ldr	r2, [pc, #124]	; (8005580 <prvHeapInit+0xac>)
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <prvHeapInit+0xb0>)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <prvHeapInit+0xb0>)
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005520:	2208      	movs	r2, #8
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <prvHeapInit+0xb4>)
 8005534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <prvHeapInit+0xb4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2200      	movs	r2, #0
 800553c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <prvHeapInit+0xb4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <prvHeapInit+0xb4>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4a0a      	ldr	r2, [pc, #40]	; (800558c <prvHeapInit+0xb8>)
 8005562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a09      	ldr	r2, [pc, #36]	; (8005590 <prvHeapInit+0xbc>)
 800556a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <prvHeapInit+0xc0>)
 800556e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005572:	601a      	str	r2, [r3, #0]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20000d20 	.word	0x20000d20
 8005584:	20004920 	.word	0x20004920
 8005588:	20004928 	.word	0x20004928
 800558c:	20004930 	.word	0x20004930
 8005590:	2000492c 	.word	0x2000492c
 8005594:	20004934 	.word	0x20004934

08005598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <prvInsertBlockIntoFreeList+0xac>)
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e002      	b.n	80055ac <prvInsertBlockIntoFreeList+0x14>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d8f7      	bhi.n	80055a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d108      	bne.n	80055da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	441a      	add	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	441a      	add	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d118      	bne.n	8005620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d00d      	beq.n	8005616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e008      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005616:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvInsertBlockIntoFreeList+0xb0>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	e003      	b.n	8005628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	429a      	cmp	r2, r3
 800562e:	d002      	beq.n	8005636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20004920 	.word	0x20004920
 8005648:	20004928 	.word	0x20004928

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4e0d      	ldr	r6, [pc, #52]	; (8005684 <__libc_init_array+0x38>)
 8005650:	4c0d      	ldr	r4, [pc, #52]	; (8005688 <__libc_init_array+0x3c>)
 8005652:	1ba4      	subs	r4, r4, r6
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	2500      	movs	r5, #0
 8005658:	42a5      	cmp	r5, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	4e0b      	ldr	r6, [pc, #44]	; (800568c <__libc_init_array+0x40>)
 800565e:	4c0c      	ldr	r4, [pc, #48]	; (8005690 <__libc_init_array+0x44>)
 8005660:	f000 f82c 	bl	80056bc <_init>
 8005664:	1ba4      	subs	r4, r4, r6
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	2500      	movs	r5, #0
 800566a:	42a5      	cmp	r5, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005674:	4798      	blx	r3
 8005676:	3501      	adds	r5, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800567e:	4798      	blx	r3
 8005680:	3501      	adds	r5, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	080057a4 	.word	0x080057a4
 8005688:	080057a4 	.word	0x080057a4
 800568c:	080057a4 	.word	0x080057a4
 8005690:	080057a8 	.word	0x080057a8

08005694 <memcpy>:
 8005694:	b510      	push	{r4, lr}
 8005696:	1e43      	subs	r3, r0, #1
 8005698:	440a      	add	r2, r1
 800569a:	4291      	cmp	r1, r2
 800569c:	d100      	bne.n	80056a0 <memcpy+0xc>
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a8:	e7f7      	b.n	800569a <memcpy+0x6>

080056aa <memset>:
 80056aa:	4402      	add	r2, r0
 80056ac:	4603      	mov	r3, r0
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d100      	bne.n	80056b4 <memset+0xa>
 80056b2:	4770      	bx	lr
 80056b4:	f803 1b01 	strb.w	r1, [r3], #1
 80056b8:	e7f9      	b.n	80056ae <memset+0x4>
	...

080056bc <_init>:
 80056bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056be:	bf00      	nop
 80056c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c2:	bc08      	pop	{r3}
 80056c4:	469e      	mov	lr, r3
 80056c6:	4770      	bx	lr

080056c8 <_fini>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	bf00      	nop
 80056cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ce:	bc08      	pop	{r3}
 80056d0:	469e      	mov	lr, r3
 80056d2:	4770      	bx	lr
